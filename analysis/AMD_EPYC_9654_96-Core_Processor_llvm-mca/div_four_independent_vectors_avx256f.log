warning: found a call in the input assembly sequence.
note: call instructions are not correctly modeled. Assume a latency of 100cy.
warning: found a return instruction in the input assembly sequence.
note: program counter updates are ignored.
Iterations:        10000
Instructions:      480000
Total Cycles:      230114
Total uOps:        490000

Dispatch Width:    6
uOps Per Cycle:    2.13
IPC:               2.09
Block RThroughput: 20.0


Cycles with backend pressure increase [ 30.42% ]
Throughput Bottlenecks: 
  Resource Pressure       [ 17.39% ]
  - Zn3ALU0  [ 0.00% ]
  - Zn3BRU1  [ 0.00% ]
  - Zn3FPP1  [ 8.70% ]
  - Zn3FPP45  [ 8.69% ]
  - Zn3FPSt  [ 4.34% ]
  - Zn3LSU  [ 8.69% ]
  - Zn3Load  [ 4.34% ]
  Data Dependencies:      [ 30.42% ]
  - Register Dependencies [ 30.42% ]
  - Memory Dependencies   [ 0.00% ]

Critical sequence based on the simulation:

              Instruction                                 Dependency Information
 +----< 32.   vmovsd	-144(%rbp,%rbx,8), %xmm0
 |
 |    < loop carried > 
 |
 |      0.    leaq	8(%rsp), %r10
 |      1.    andq	$-32, %rsp
 |      2.    pushq	-8(%r10)
 |      3.    pushq	%rbp
 |      4.    movq	%rsp, %rbp
 |      5.    pushq	%r10
 |      6.    pushq	%rbx
 |      7.    addq	$-128, %rsp
 |      8.    testb	$-128, __cpu_model+13(%rip)
 |      9.    je	.L10
 |      10.   vmovapd	.LC0(%rip), %ymm2
 |      11.   movl	$2000000000, %ebx
 +----> 12.   vmovapd	.LC1(%rip), %ymm3                 ## RESOURCE interference:  Zn3FPP45 [ probability: 99% ]
 +----> 13.   vmovapd	.LC2(%rip), %ymm1                 ## RESOURCE interference:  Zn3FPP45 [ probability: 99% ]
 +----> 14.   vmovapd	.LC4(%rip), %ymm7                 ## RESOURCE interference:  Zn3FPP45 [ probability: 99% ]
 |      15.   vmovapd	.LC5(%rip), %ymm6
 |      16.   vmovapd	.LC6(%rip), %ymm5
 +----> 17.   vdivpd	%ymm7, %ymm3, %ymm3               ## REGISTER dependency:  %ymm7
 |      18.   vxorpd	%xmm0, %xmm0, %xmm0
 +----> 19.   vdivpd	%ymm6, %ymm2, %ymm2               ## RESOURCE interference:  Zn3FPP1 [ probability: 99% ]
 +----> 20.   vdivpd	%ymm5, %ymm1, %ymm1               ## RESOURCE interference:  Zn3FPP1 [ probability: 99% ]
 +----> 21.   vdivpd	%ymm0, %ymm4, %ymm4               ## RESOURCE interference:  Zn3FPP1 [ probability: 99% ]
 |      22.   subq	$1, %rbx
 |      23.   jne	.L2
 |      24.   vmovapd	%ymm3, -144(%rbp)
 |      25.   vmovapd	%ymm2, -112(%rbp)
 |      26.   vmovapd	%ymm1, -80(%rbp)
 +----> 27.   vmovapd	%ymm4, -48(%rbp)                  ## REGISTER dependency:  %ymm4
        28.   vzeroupper
        29.   movq	%rbx, %rsi
        30.   movl	$.LC7, %edi
        31.   movl	$1, %eax
        32.   vmovsd	-144(%rbp,%rbx,8), %xmm0
        33.   addq	$1, %rbx
        34.   callq	printf
        35.   cmpq	$16, %rbx
        36.   jne	.L4
        37.   xorl	%eax, %eax
        38.   subq	$-128, %rsp
        39.   popq	%rbx
        40.   popq	%r10
        41.   popq	%rbp
        42.   leaq	-8(%r10), %rsp
        43.   retq
        44.   movl	$.LC3, %edi
        45.   callq	puts
        46.   movl	$1, %eax
        47.   jmp	.L1


Instruction Info:
[1]: #uOps
[2]: Latency
[3]: RThroughput
[4]: MayLoad
[5]: MayStore
[6]: HasSideEffects (U)

[1]    [2]    [3]    [4]    [5]    [6]    Instructions:
 1      1     0.33                        leaq	8(%rsp), %r10
 1      1     0.25                        andq	$-32, %rsp
 2      6     1.00    *      *            pushq	-8(%r10)
 1      1     1.00           *            pushq	%rbp
 1      0     0.17                        movq	%rsp, %rbp
 1      1     1.00           *            pushq	%r10
 1      1     1.00           *            pushq	%rbx
 1      1     0.25                        addq	$-128, %rsp
 1      5     0.33    *                   testb	$-128, __cpu_model+13(%rip)
 1      1     0.50                        je	.L10
 1      8     0.50    *                   vmovapd	.LC0(%rip), %ymm2
 1      1     0.50                        movl	$2000000000, %ebx
 1      8     0.50    *                   vmovapd	.LC1(%rip), %ymm3
 1      8     0.50    *                   vmovapd	.LC2(%rip), %ymm1
 1      8     0.50    *                   vmovapd	.LC4(%rip), %ymm7
 1      8     0.50    *                   vmovapd	.LC5(%rip), %ymm6
 1      8     0.50    *                   vmovapd	.LC6(%rip), %ymm5
 1      13    5.00                        vdivpd	%ymm7, %ymm3, %ymm3
 1      0     0.17                        vxorpd	%xmm0, %xmm0, %xmm0
 1      13    5.00                        vdivpd	%ymm6, %ymm2, %ymm2
 1      13    5.00                        vdivpd	%ymm5, %ymm1, %ymm1
 1      13    5.00                        vdivpd	%ymm0, %ymm4, %ymm4
 1      1     0.25                        subq	$1, %rbx
 1      1     0.50                        jne	.L2
 1      1     1.00           *            vmovapd	%ymm3, -144(%rbp)
 1      1     1.00           *            vmovapd	%ymm2, -112(%rbp)
 1      1     1.00           *            vmovapd	%ymm1, -80(%rbp)
 1      1     1.00           *            vmovapd	%ymm4, -48(%rbp)
 1      0     0.25                  U     vzeroupper
 1      0     0.17                        movq	%rbx, %rsi
 1      1     0.50                        movl	$.LC7, %edi
 1      1     0.50                        movl	$1, %eax
 1      8     0.50    *                   vmovsd	-144(%rbp,%rbx,8), %xmm0
 1      1     0.25                        addq	$1, %rbx
 1      1     0.50                        callq	printf
 1      1     0.25                        cmpq	$16, %rbx
 1      1     0.50                        jne	.L4
 1      0     0.17                        xorl	%eax, %eax
 1      1     0.25                        subq	$-128, %rsp
 1      5     0.33    *                   popq	%rbx
 1      5     0.33    *                   popq	%r10
 1      5     0.33    *                   popq	%rbp
 1      1     0.33                        leaq	-8(%r10), %rsp
 1      5     0.50                  U     retq
 1      1     0.50                        movl	$.LC3, %edi
 1      1     0.50                        callq	puts
 1      1     0.50                        movl	$1, %eax
 1      1     0.50                        jmp	.L1


Retire Control Unit - number of cycles where we saw N instructions retired:
[# retired], [# cycles]
 0,           160106  (69.6%)
 1,           5  (0.0%)
 2,           4  (0.0%)
 3,           10001  (4.3%)
 5,           9999  (4.3%)
 6,           1  (0.0%)
 7,           1  (0.0%)
 8,           49997  (21.7%)

Total ROB Entries:                256
Max Used ROB Entries:             256  ( 100.0% )
Average Used ROB Entries per cy:  254  ( 99.2% )


Resources:
[0]   - Zn3AGU0
[1]   - Zn3AGU1
[2]   - Zn3AGU2
[3]   - Zn3ALU0
[4]   - Zn3ALU1
[5]   - Zn3ALU2
[6]   - Zn3ALU3
[7]   - Zn3BRU1
[8]   - Zn3FPP0
[9]   - Zn3FPP1
[10]  - Zn3FPP2
[11]  - Zn3FPP3
[12.0] - Zn3FPP45
[12.1] - Zn3FPP45
[13]  - Zn3FPSt
[14.0] - Zn3LSU
[14.1] - Zn3LSU
[14.2] - Zn3LSU
[15.0] - Zn3Load
[15.1] - Zn3Load
[15.2] - Zn3Load
[16.0] - Zn3Store
[16.1] - Zn3Store


Resource pressure per iteration:
[0]    [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    [10]   [11]   [12.0] [12.1] [13]   [14.0] [14.1] [14.2] [15.0] [15.1] [15.2] [16.0] [16.1] 
4.00   4.00   4.00   4.00   5.00   5.67   5.33   4.00   0.33   20.00  0.33   0.33   5.50   5.50   4.00   8.33   8.33   8.33   4.33   4.33   4.33   6.00   6.00   

Resource pressure by instruction:
[0]    [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    [10]   [11]   [12.0] [12.1] [13]   [14.0] [14.1] [14.2] [15.0] [15.1] [15.2] [16.0] [16.1] Instructions:
0.33   0.33   0.33    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     leaq	8(%rsp), %r10
 -      -      -      -     0.33    -     0.67    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     andq	$-32, %rsp
0.67   0.67   0.67    -      -      -      -      -      -      -      -      -      -      -      -     1.00   1.00   1.00   0.33   0.33   0.33    -     2.00   pushq	-8(%r10)
0.33   0.33   0.33    -      -      -      -      -      -      -      -      -      -      -      -     0.67   0.67   0.67    -      -      -     2.00    -     pushq	%rbp
 -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     movq	%rsp, %rbp
0.33   0.33   0.33    -      -      -      -      -      -      -      -      -      -      -      -     0.67   0.67   0.67    -      -      -      -     2.00   pushq	%r10
0.33   0.33   0.33    -      -      -      -      -      -      -      -      -      -      -      -     0.67   0.67   0.67    -      -      -     2.00    -     pushq	%rbx
 -      -      -      -      -     0.67   0.33    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     addq	$-128, %rsp
0.33   0.33   0.33    -     0.67   0.33    -      -      -      -      -      -      -      -      -     0.33   0.33   0.33   0.33   0.33   0.33    -      -     testb	$-128, __cpu_model+13(%rip)
 -      -      -     0.33    -      -      -     0.67    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     je	.L10
 -      -      -      -      -      -      -      -      -      -      -      -     0.50   0.50    -     0.33   0.33   0.33   0.33   0.33   0.33    -      -     vmovapd	.LC0(%rip), %ymm2
 -      -      -      -     0.67    -     1.33    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     movl	$2000000000, %ebx
 -      -      -      -      -      -      -      -      -      -      -      -     0.50   0.50    -     0.33   0.33   0.33   0.33   0.33   0.33    -      -     vmovapd	.LC1(%rip), %ymm3
 -      -      -      -      -      -      -      -      -      -      -      -     0.50   0.50    -     0.33   0.33   0.33   0.33   0.33   0.33    -      -     vmovapd	.LC2(%rip), %ymm1
 -      -      -      -      -      -      -      -      -      -      -      -     0.50   0.50    -     0.33   0.33   0.33   0.33   0.33   0.33    -      -     vmovapd	.LC4(%rip), %ymm7
 -      -      -      -      -      -      -      -      -      -      -      -     0.50   0.50    -     0.33   0.33   0.33   0.33   0.33   0.33    -      -     vmovapd	.LC5(%rip), %ymm6
 -      -      -      -      -      -      -      -      -      -      -      -     0.50   0.50    -     0.33   0.33   0.33   0.33   0.33   0.33    -      -     vmovapd	.LC6(%rip), %ymm5
 -      -      -      -      -      -      -      -      -     5.00    -      -      -      -      -      -      -      -      -      -      -      -      -     vdivpd	%ymm7, %ymm3, %ymm3
 -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     vxorpd	%xmm0, %xmm0, %xmm0
 -      -      -      -      -      -      -      -      -     5.00    -      -      -      -      -      -      -      -      -      -      -      -      -     vdivpd	%ymm6, %ymm2, %ymm2
 -      -      -      -      -      -      -      -      -     5.00    -      -      -      -      -      -      -      -      -      -      -      -      -     vdivpd	%ymm5, %ymm1, %ymm1
 -      -      -      -      -      -      -      -      -     5.00    -      -      -      -      -      -      -      -      -      -      -      -      -     vdivpd	%ymm0, %ymm4, %ymm4
 -      -      -      -     0.67    -     0.33    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     subq	$1, %rbx
 -      -      -     0.33    -      -      -     0.67    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     jne	.L2
 -      -      -      -      -      -      -      -      -      -      -      -     0.50   0.50   1.00   0.33   0.33   0.33    -      -      -      -     1.00   vmovapd	%ymm3, -144(%rbp)
 -      -      -      -      -      -      -      -      -      -      -      -     0.50   0.50   1.00   0.33   0.33   0.33    -      -      -     1.00    -     vmovapd	%ymm2, -112(%rbp)
 -      -      -      -      -      -      -      -      -      -      -      -     0.50   0.50   1.00   0.33   0.33   0.33    -      -      -      -     1.00   vmovapd	%ymm1, -80(%rbp)
 -      -      -      -      -      -      -      -      -      -      -      -     0.50   0.50   1.00   0.33   0.33   0.33    -      -      -     1.00    -     vmovapd	%ymm4, -48(%rbp)
 -      -      -      -      -      -      -      -     0.33    -     0.33   0.33    -      -      -      -      -      -      -      -      -      -      -     vzeroupper
 -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     movq	%rbx, %rsi
 -      -      -      -      -     0.67   1.33    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     movl	$.LC7, %edi
 -      -      -      -     0.67   1.33    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     movl	$1, %eax
 -      -      -      -      -      -      -      -      -      -      -      -     0.50   0.50    -     0.33   0.33   0.33   0.33   0.33   0.33    -      -     vmovsd	-144(%rbp,%rbx,8), %xmm0
 -      -      -     0.33   0.67    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     addq	$1, %rbx
 -      -      -     0.33    -      -      -     0.67    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     callq	printf
 -      -      -     0.33    -      -     0.67    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     cmpq	$16, %rbx
 -      -      -     0.33    -      -      -     0.67    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     jne	.L4
 -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     xorl	%eax, %eax
 -      -      -     0.33    -     0.67    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     subq	$-128, %rsp
0.33   0.33   0.33    -      -      -      -      -      -      -      -      -      -      -      -     0.33   0.33   0.33   0.33   0.33   0.33    -      -     popq	%rbx
0.33   0.33   0.33    -      -      -      -      -      -      -      -      -      -      -      -     0.33   0.33   0.33   0.33   0.33   0.33    -      -     popq	%r10
0.33   0.33   0.33    -      -      -      -      -      -      -      -      -      -      -      -     0.33   0.33   0.33   0.33   0.33   0.33    -      -     popq	%rbp
0.33   0.33   0.33    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     leaq	-8(%r10), %rsp
0.33   0.33   0.33   0.67    -      -      -     0.33    -      -      -      -      -      -      -     0.33   0.33   0.33   0.33   0.33   0.33    -      -     retq
 -      -      -      -      -     1.33   0.67    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     movl	$.LC3, %edi
 -      -      -     0.67    -      -      -     0.33    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     callq	puts
 -      -      -      -     1.33   0.67    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     movl	$1, %eax
 -      -      -     0.33    -      -      -     0.67    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     jmp	.L1


Timeline view:
                    0123456789          0123456789          0123456789          01234567
Index     0123456789          0123456789          0123456789          0123456789        

[0,0]     DeER .    .    .    .    .    .    .    .    .    .    .    .    .    .    . .   leaq	8(%rsp), %r10
[0,1]     DeER .    .    .    .    .    .    .    .    .    .    .    .    .    .    . .   andq	$-32, %rsp
[0,2]     D=eeeeeeER.    .    .    .    .    .    .    .    .    .    .    .    .    . .   pushq	-8(%r10)
[0,3]     D=======eER    .    .    .    .    .    .    .    .    .    .    .    .    . .   pushq	%rbp
[0,4]     D---------R    .    .    .    .    .    .    .    .    .    .    .    .    . .   movq	%rsp, %rbp
[0,5]     .D=======eER   .    .    .    .    .    .    .    .    .    .    .    .    . .   pushq	%r10
[0,6]     .D========eER  .    .    .    .    .    .    .    .    .    .    .    .    . .   pushq	%rbx
[0,7]     .D=========eER .    .    .    .    .    .    .    .    .    .    .    .    . .   addq	$-128, %rsp
[0,8]     .DeeeeeE-----R .    .    .    .    .    .    .    .    .    .    .    .    . .   testb	$-128, __cpu_model+13(%rip)
[0,9]     .D=====eE----R .    .    .    .    .    .    .    .    .    .    .    .    . .   je	.L10
[0,10]    .DeeeeeeeeE--R .    .    .    .    .    .    .    .    .    .    .    .    . .   vmovapd	.LC0(%rip), %ymm2
[0,11]    . DeE--------R .    .    .    .    .    .    .    .    .    .    .    .    . .   movl	$2000000000, %ebx
[0,12]    . DeeeeeeeeE-R .    .    .    .    .    .    .    .    .    .    .    .    . .   vmovapd	.LC1(%rip), %ymm3
[0,13]    . DeeeeeeeeE-R .    .    .    .    .    .    .    .    .    .    .    .    . .   vmovapd	.LC2(%rip), %ymm1
[0,14]    . D=eeeeeeeeER .    .    .    .    .    .    .    .    .    .    .    .    . .   vmovapd	.LC4(%rip), %ymm7
[0,15]    . D=eeeeeeeeE-R.    .    .    .    .    .    .    .    .    .    .    .    . .   vmovapd	.LC5(%rip), %ymm6
[0,16]    . D==eeeeeeeeER.    .    .    .    .    .    .    .    .    .    .    .    . .   vmovapd	.LC6(%rip), %ymm5
[0,17]    .  D========eeeeeeeeeeeeeER   .    .    .    .    .    .    .    .    .    . .   vdivpd	%ymm7, %ymm3, %ymm3
[0,18]    .  D----------------------R   .    .    .    .    .    .    .    .    .    . .   vxorpd	%xmm0, %xmm0, %xmm0
[0,19]    .  D=============eeeeeeeeeeeeeER   .    .    .    .    .    .    .    .    . .   vdivpd	%ymm6, %ymm2, %ymm2
[0,20]    .  D==================eeeeeeeeeeeeeER   .    .    .    .    .    .    .    . .   vdivpd	%ymm5, %ymm1, %ymm1
[0,21]    .  DeeeeeeeeeeeeeE------------------R   .    .    .    .    .    .    .    . .   vdivpd	%ymm0, %ymm4, %ymm4
[0,22]    .  DeE------------------------------R   .    .    .    .    .    .    .    . .   subq	$1, %rbx
[0,23]    .   DeE-----------------------------R   .    .    .    .    .    .    .    . .   jne	.L2
[0,24]    .   D====================eE---------R   .    .    .    .    .    .    .    . .   vmovapd	%ymm3, -144(%rbp)
[0,25]    .   D=========================eE----R   .    .    .    .    .    .    .    . .   vmovapd	%ymm2, -112(%rbp)
[0,26]    .   D==============================eER  .    .    .    .    .    .    .    . .   vmovapd	%ymm1, -80(%rbp)
[0,27]    .   D===============================eER .    .    .    .    .    .    .    . .   vmovapd	%ymm4, -48(%rbp)
[0,28]    .   DE--------------------------------R .    .    .    .    .    .    .    . .   vzeroupper
[0,29]    .    D--------------------------------R .    .    .    .    .    .    .    . .   movq	%rbx, %rsi
[0,30]    .    DeE------------------------------R .    .    .    .    .    .    .    . .   movl	$.LC7, %edi
[0,31]    .    DeE------------------------------R .    .    .    .    .    .    .    . .   movl	$1, %eax
[0,32]    .    D======eeeeeeeeE-----------------R .    .    .    .    .    .    .    . .   vmovsd	-144(%rbp,%rbx,8), %xmm0
[0,33]    .    DeE------------------------------R .    .    .    .    .    .    .    . .   addq	$1, %rbx
Truncated display due to cycle limit


Average Wait times (based on the timeline view):
[0]: Executions
[1]: Average time spent waiting in a scheduler's queue
[2]: Average time spent waiting in a scheduler's queue while ready
[3]: Average time elapsed from WB until retire stage

      [0]    [1]    [2]    [3]
0.     10    38.9   0.1    89.1      leaq	8(%rsp), %r10
1.     10    38.8   0.1    89.1      andq	$-32, %rsp
2.     10    40.4   0.0    82.6      pushq	-8(%r10)
3.     10    46.3   0.0    81.7      pushq	%rbp
4.     10    0.0    0.0    128.9     movq	%rsp, %rbp
5.     10    47.0   0.0    81.7      pushq	%r10
6.     10    47.9   0.0    80.8      pushq	%rbx
7.     10    44.4   0.0    79.9      addq	$-128, %rsp
8.     10    1.0    1.0    119.3     testb	$-128, __cpu_model+13(%rip)
9.     10    5.9    0.0    118.3     je	.L10
10.    10    1.1    1.1    116.0     vmovapd	.LC0(%rip), %ymm2
11.    10    1.0    1.0    122.9     movl	$2000000000, %ebx
12.    10    1.7    1.7    115.1     vmovapd	.LC1(%rip), %ymm3
13.    10    1.8    1.8    115.4     vmovapd	.LC2(%rip), %ymm1
14.    10    2.6    2.6    114.6     vmovapd	.LC4(%rip), %ymm7
15.    10    3.0    3.0    114.2     vmovapd	.LC5(%rip), %ymm6
16.    10    3.4    3.4    113.7     vmovapd	.LC6(%rip), %ymm5
17.    10    25.2   15.0   87.9      vdivpd	%ymm7, %ymm3, %ymm3
18.    10    0.0    0.0    126.0     vxorpd	%xmm0, %xmm0, %xmm0
19.    10    29.6   19.5   83.4      vdivpd	%ymm6, %ymm2, %ymm2
20.    10    34.6   24.0   78.9      vdivpd	%ymm5, %ymm1, %ymm1
21.    10    27.9   27.9   86.4      vdivpd	%ymm0, %ymm4, %ymm4
22.    10    1.0    0.8    125.2     subq	$1, %rbx
23.    10    1.8    0.0    124.2     jne	.L2
24.    10    44.3   0.0    81.6      vmovapd	%ymm3, -144(%rbp)
25.    10    46.4   0.6    79.0      vmovapd	%ymm2, -112(%rbp)
26.    10    49.2   0.5    76.3      vmovapd	%ymm1, -80(%rbp)
27.    10    50.8   0.7    74.7      vmovapd	%ymm4, -48(%rbp)
28.    10    1.0    1.0    125.4     vzeroupper
29.    10    0.0    0.0    127.1     movq	%rbx, %rsi
30.    10    1.0    1.0    125.0     movl	$.LC7, %edi
31.    10    1.0    1.0    124.5     movl	$1, %eax
32.    10    41.4   0.0    77.1      vmovsd	-144(%rbp,%rbx,8), %xmm0
33.    10    1.0    0.9    124.4     addq	$1, %rbx
34.    10    41.2   0.0    0.0       callq	printf
35.    10    1.7    0.0    138.3     cmpq	$16, %rbx
36.    10    2.6    0.0    137.3     jne	.L4
37.    10    0.0    0.0    140.4     xorl	%eax, %eax
38.    10    40.4   0.0    99.0      subq	$-128, %rsp
39.    10    41.3   0.0    94.0      popq	%rbx
40.    10    46.2   0.0    89.0      popq	%r10
41.    10    51.0   0.0    84.0      popq	%rbp
42.    10    50.9   0.0    89.0      leaq	-8(%r10), %rsp
43.    10    1.0    1.0    134.4     retq
44.    10    1.0    1.0    138.4     movl	$.LC3, %edi
45.    10    41.7   0.0    0.0       callq	puts
46.    10    1.0    1.0    139.6     movl	$1, %eax
47.    10    1.2    1.2    139.3     jmp	.L1
       10    20.9   2.4    102.4     <total>
