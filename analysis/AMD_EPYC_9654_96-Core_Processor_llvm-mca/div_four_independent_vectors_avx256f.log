warning: found a call in the input assembly sequence.
note: call instructions are not correctly modeled. Assume a latency of 100cy.
warning: found a return instruction in the input assembly sequence.
note: program counter updates are ignored.
Iterations:        10000
Instructions:      490000
Total Cycles:      235830
Total uOps:        500000

Dispatch Width:    6
uOps Per Cycle:    2.12
IPC:               2.08
Block RThroughput: 20.0


Cycles with backend pressure increase [ 30.89% ]
Throughput Bottlenecks: 
  Resource Pressure       [ 23.02% ]
  - Zn3ALU0  [ 0.00% ]
  - Zn3ALU1  [ 0.00% ]
  - Zn3ALU2  [ 0.00% ]
  - Zn3ALU3  [ 0.00% ]
  - Zn3FPP1  [ 20.59% ]
  - Zn3FPP45  [ 4.85% ]
  - Zn3FPSt  [ 0.00% ]
  - Zn3LSU  [ 11.50% ]
  - Zn3Load  [ 0.61% ]
  Data Dependencies:      [ 29.68% ]
  - Register Dependencies [ 29.68% ]
  - Memory Dependencies   [ 0.00% ]

Critical sequence based on the simulation:

              Instruction                                 Dependency Information
 +----< 43.   leaq	-8(%r10), %rsp
 |
 |    < loop carried > 
 |
 |      0.    leaq	8(%rsp), %r10
 +----> 1.    andq	$-32, %rsp                        ## REGISTER dependency:  %rsp
 +----> 2.    pushq	-8(%r10)                          ## REGISTER dependency:  %rsp
 +----> 3.    pushq	%rbp                              ## REGISTER dependency:  %rsp
 |      4.    movq	%rsp, %rbp
 +----> 5.    pushq	%r10                              ## REGISTER dependency:  %rsp
 +----> 6.    pushq	%rbx                              ## REGISTER dependency:  %rsp
 |      7.    addq	$-128, %rsp
 |      8.    testb	$-128, __cpu_model+13(%rip)
 |      9.    je	.L10
 +----> 10.   vmovapd	.LC0(%rip), %ymm1                 ## RESOURCE interference:  Zn3LSU [ probability: 28% ]
 |      11.   movl	$2000000000, %ebx
 +----> 12.   vmovapd	.LC1(%rip), %ymm2                 ## RESOURCE interference:  Zn3LSU [ probability: 85% ]
 +----> 13.   vmovapd	.LC2(%rip), %ymm3                 ## RESOURCE interference:  Zn3LSU [ probability: 71% ]
 +----> 14.   vmovapd	.LC3(%rip), %ymm0                 ## RESOURCE interference:  Zn3LSU [ probability: 71% ]
 +----> 15.   vmovapd	.LC5(%rip), %ymm7                 ## RESOURCE interference:  Zn3FPP45 [ probability: 57% ]
 |      16.   vmovapd	.LC6(%rip), %ymm6
 |      17.   vmovapd	.LC7(%rip), %ymm5
 |      18.   vmovapd	.LC8(%rip), %ymm4
 +----> 19.   vdivpd	%ymm7, %ymm3, %ymm3               ## REGISTER dependency:  %ymm7
 +----> 20.   vdivpd	%ymm6, %ymm2, %ymm2               ## RESOURCE interference:  Zn3FPP1 [ probability: 99% ]
 +----> 21.   vdivpd	%ymm5, %ymm1, %ymm1               ## RESOURCE interference:  Zn3FPP1 [ probability: 99% ]
 +----> 22.   vdivpd	%ymm4, %ymm0, %ymm0               ## RESOURCE interference:  Zn3FPP1 [ probability: 99% ]
 |      23.   subq	$1, %rbx
 |      24.   jne	.L2
 |      25.   vmovapd	%ymm3, -144(%rbp)
 |      26.   vmovapd	%ymm2, -112(%rbp)
 |      27.   vmovapd	%ymm1, -80(%rbp)
 +----> 28.   vmovapd	%ymm0, -48(%rbp)                  ## REGISTER dependency:  %ymm0
        29.   vzeroupper
        30.   movq	%rbx, %rsi
        31.   movl	$.LC9, %edi
        32.   movl	$1, %eax
        33.   vmovsd	-144(%rbp,%rbx,8), %xmm0
        34.   addq	$1, %rbx
        35.   callq	printf
        36.   cmpq	$16, %rbx
        37.   jne	.L4
        38.   xorl	%eax, %eax
        39.   subq	$-128, %rsp
        40.   popq	%rbx
        41.   popq	%r10
        42.   popq	%rbp
        43.   leaq	-8(%r10), %rsp
        44.   retq
        45.   movl	$.LC4, %edi
        46.   callq	puts
        47.   movl	$1, %eax
        48.   jmp	.L1


Instruction Info:
[1]: #uOps
[2]: Latency
[3]: RThroughput
[4]: MayLoad
[5]: MayStore
[6]: HasSideEffects (U)

[1]    [2]    [3]    [4]    [5]    [6]    Instructions:
 1      1     0.33                        leaq	8(%rsp), %r10
 1      1     0.25                        andq	$-32, %rsp
 2      6     1.00    *      *            pushq	-8(%r10)
 1      1     1.00           *            pushq	%rbp
 1      0     0.17                        movq	%rsp, %rbp
 1      1     1.00           *            pushq	%r10
 1      1     1.00           *            pushq	%rbx
 1      1     0.25                        addq	$-128, %rsp
 1      5     0.33    *                   testb	$-128, __cpu_model+13(%rip)
 1      1     0.50                        je	.L10
 1      8     0.50    *                   vmovapd	.LC0(%rip), %ymm1
 1      1     0.50                        movl	$2000000000, %ebx
 1      8     0.50    *                   vmovapd	.LC1(%rip), %ymm2
 1      8     0.50    *                   vmovapd	.LC2(%rip), %ymm3
 1      8     0.50    *                   vmovapd	.LC3(%rip), %ymm0
 1      8     0.50    *                   vmovapd	.LC5(%rip), %ymm7
 1      8     0.50    *                   vmovapd	.LC6(%rip), %ymm6
 1      8     0.50    *                   vmovapd	.LC7(%rip), %ymm5
 1      8     0.50    *                   vmovapd	.LC8(%rip), %ymm4
 1      13    5.00                        vdivpd	%ymm7, %ymm3, %ymm3
 1      13    5.00                        vdivpd	%ymm6, %ymm2, %ymm2
 1      13    5.00                        vdivpd	%ymm5, %ymm1, %ymm1
 1      13    5.00                        vdivpd	%ymm4, %ymm0, %ymm0
 1      1     0.25                        subq	$1, %rbx
 1      1     0.50                        jne	.L2
 1      1     1.00           *            vmovapd	%ymm3, -144(%rbp)
 1      1     1.00           *            vmovapd	%ymm2, -112(%rbp)
 1      1     1.00           *            vmovapd	%ymm1, -80(%rbp)
 1      1     1.00           *            vmovapd	%ymm0, -48(%rbp)
 1      0     0.25                  U     vzeroupper
 1      0     0.17                        movq	%rbx, %rsi
 1      1     0.50                        movl	$.LC9, %edi
 1      1     0.50                        movl	$1, %eax
 1      8     0.50    *                   vmovsd	-144(%rbp,%rbx,8), %xmm0
 1      1     0.25                        addq	$1, %rbx
 1      1     0.50                        callq	printf
 1      1     0.25                        cmpq	$16, %rbx
 1      1     0.50                        jne	.L4
 1      0     0.17                        xorl	%eax, %eax
 1      1     0.25                        subq	$-128, %rsp
 1      5     0.33    *                   popq	%rbx
 1      5     0.33    *                   popq	%r10
 1      5     0.33    *                   popq	%rbp
 1      1     0.33                        leaq	-8(%r10), %rsp
 1      5     0.50                  U     retq
 1      1     0.50                        movl	$.LC4, %edi
 1      1     0.50                        callq	puts
 1      1     0.50                        movl	$1, %eax
 1      1     0.50                        jmp	.L1


Retire Control Unit - number of cycles where we saw N instructions retired:
[# retired], [# cycles]
 0,           165821  (70.3%)
 1,           7  (0.0%)
 2,           2  (0.0%)
 3,           10002  (4.2%)
 6,           10000  (4.2%)
 7,           1  (0.0%)
 8,           49997  (21.2%)

Total ROB Entries:                256
Max Used ROB Entries:             256  ( 100.0% )
Average Used ROB Entries per cy:  253  ( 98.8% )


Resources:
[0]   - Zn3AGU0
[1]   - Zn3AGU1
[2]   - Zn3AGU2
[3]   - Zn3ALU0
[4]   - Zn3ALU1
[5]   - Zn3ALU2
[6]   - Zn3ALU3
[7]   - Zn3BRU1
[8]   - Zn3FPP0
[9]   - Zn3FPP1
[10]  - Zn3FPP2
[11]  - Zn3FPP3
[12.0] - Zn3FPP45
[12.1] - Zn3FPP45
[13]  - Zn3FPSt
[14.0] - Zn3LSU
[14.1] - Zn3LSU
[14.2] - Zn3LSU
[15.0] - Zn3Load
[15.1] - Zn3Load
[15.2] - Zn3Load
[16.0] - Zn3Store
[16.1] - Zn3Store


Resource pressure per iteration:
[0]    [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    [10]   [11]   [12.0] [12.1] [13]   [14.0] [14.1] [14.2] [15.0] [15.1] [15.2] [16.0] [16.1] 
4.00   4.00   4.00   4.29   4.86   6.00   4.86   4.00   0.33   20.00  0.33   0.33   6.50   6.50   4.00   9.00   9.00   9.00   5.00   5.00   5.00   6.00   6.00   

Resource pressure by instruction:
[0]    [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    [10]   [11]   [12.0] [12.1] [13]   [14.0] [14.1] [14.2] [15.0] [15.1] [15.2] [16.0] [16.1] Instructions:
0.33   0.33   0.33    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     leaq	8(%rsp), %r10
 -      -      -      -     0.57   0.14   0.29    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     andq	$-32, %rsp
0.67   0.67   0.67    -      -      -      -      -      -      -      -      -      -      -      -     1.00   1.00   1.00    -     1.00    -      -     2.00   pushq	-8(%r10)
0.33   0.33   0.33    -      -      -      -      -      -      -      -      -      -      -      -     0.67   0.67   0.67    -      -      -     2.00    -     pushq	%rbp
 -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     movq	%rsp, %rbp
0.33   0.33   0.33    -      -      -      -      -      -      -      -      -      -      -      -     0.67   0.67   0.67    -      -      -      -     2.00   pushq	%r10
0.33   0.33   0.33    -      -      -      -      -      -      -      -      -      -      -      -     0.67   0.67   0.67    -      -      -     2.00    -     pushq	%rbx
 -      -      -     0.29   0.43   0.29    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     addq	$-128, %rsp
0.33   0.33   0.33    -     0.14   0.14   0.71    -      -      -      -      -      -      -      -     0.33   0.33   0.33   1.00    -      -      -      -     testb	$-128, __cpu_model+13(%rip)
 -      -      -     0.14    -      -      -     0.86    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     je	.L10
 -      -      -      -      -      -      -      -      -      -      -      -     0.50   0.50    -     0.33   0.33   0.33    -      -     1.00    -      -     vmovapd	.LC0(%rip), %ymm1
 -      -      -      -     0.29   1.43   0.29    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     movl	$2000000000, %ebx
 -      -      -      -      -      -      -      -      -      -      -      -     0.50   0.50    -     0.33   0.33   0.33   0.14   0.71   0.14    -      -     vmovapd	.LC1(%rip), %ymm2
 -      -      -      -      -      -      -      -      -      -      -      -     0.50   0.50    -     0.33   0.33   0.33   0.71   0.29    -      -      -     vmovapd	.LC2(%rip), %ymm3
 -      -      -      -      -      -      -      -      -      -      -      -     0.50   0.50    -     0.33   0.33   0.33   0.57    -     0.43    -      -     vmovapd	.LC3(%rip), %ymm0
 -      -      -      -      -      -      -      -      -      -      -      -     0.50   0.50    -     0.33   0.33   0.33    -     0.43   0.57    -      -     vmovapd	.LC5(%rip), %ymm7
 -      -      -      -      -      -      -      -      -      -      -      -     0.50   0.50    -     0.33   0.33   0.33    -     1.00    -      -      -     vmovapd	.LC6(%rip), %ymm6
 -      -      -      -      -      -      -      -      -      -      -      -     0.50   0.50    -     0.33   0.33   0.33   1.00    -      -      -      -     vmovapd	.LC7(%rip), %ymm5
 -      -      -      -      -      -      -      -      -      -      -      -     0.50   0.50    -     0.33   0.33   0.33    -      -     1.00    -      -     vmovapd	.LC8(%rip), %ymm4
 -      -      -      -      -      -      -      -      -     5.00    -      -      -      -      -      -      -      -      -      -      -      -      -     vdivpd	%ymm7, %ymm3, %ymm3
 -      -      -      -      -      -      -      -      -     5.00    -      -      -      -      -      -      -      -      -      -      -      -      -     vdivpd	%ymm6, %ymm2, %ymm2
 -      -      -      -      -      -      -      -      -     5.00    -      -      -      -      -      -      -      -      -      -      -      -      -     vdivpd	%ymm5, %ymm1, %ymm1
 -      -      -      -      -      -      -      -      -     5.00    -      -      -      -      -      -      -      -      -      -      -      -      -     vdivpd	%ymm4, %ymm0, %ymm0
 -      -      -     0.29   0.43    -     0.29    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     subq	$1, %rbx
 -      -      -     0.43    -      -      -     0.57    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     jne	.L2
 -      -      -      -      -      -      -      -      -      -      -      -     0.50   0.50   1.00   0.33   0.33   0.33    -      -      -      -     1.00   vmovapd	%ymm3, -144(%rbp)
 -      -      -      -      -      -      -      -      -      -      -      -     0.50   0.50   1.00   0.33   0.33   0.33    -      -      -     1.00    -     vmovapd	%ymm2, -112(%rbp)
 -      -      -      -      -      -      -      -      -      -      -      -     0.50   0.50   1.00   0.33   0.33   0.33    -      -      -      -     1.00   vmovapd	%ymm1, -80(%rbp)
 -      -      -      -      -      -      -      -      -      -      -      -     0.50   0.50   1.00   0.33   0.33   0.33    -      -      -     1.00    -     vmovapd	%ymm0, -48(%rbp)
 -      -      -      -      -      -      -      -     0.33    -     0.33   0.33    -      -      -      -      -      -      -      -      -      -      -     vzeroupper
 -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     movq	%rbx, %rsi
 -      -      -      -      -     1.43   0.57    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     movl	$.LC9, %edi
 -      -      -      -     1.43   0.57    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     movl	$1, %eax
 -      -      -      -      -      -      -      -      -      -      -      -     0.50   0.50    -     0.33   0.33   0.33   0.43   0.29   0.29    -      -     vmovsd	-144(%rbp,%rbx,8), %xmm0
 -      -      -     0.43   0.14    -     0.43    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     addq	$1, %rbx
 -      -      -     0.43    -      -      -     0.57    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     callq	printf
 -      -      -     0.29   0.29   0.14   0.29    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     cmpq	$16, %rbx
 -      -      -     0.57    -      -      -     0.43    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     jne	.L4
 -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     xorl	%eax, %eax
 -      -      -      -     0.29   0.14   0.57    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     subq	$-128, %rsp
0.33   0.33   0.33    -      -      -      -      -      -      -      -      -      -      -      -     0.33   0.33   0.33   0.14   0.29   0.57    -      -     popq	%rbx
0.33   0.33   0.33    -      -      -      -      -      -      -      -      -      -      -      -     0.33   0.33   0.33    -     1.00    -      -      -     popq	%r10
0.33   0.33   0.33    -      -      -      -      -      -      -      -      -      -      -      -     0.33   0.33   0.33    -      -     1.00    -      -     popq	%rbp
0.33   0.33   0.33    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     leaq	-8(%r10), %rsp
0.33   0.33   0.33   0.43    -      -      -     0.57    -      -      -      -      -      -      -     0.33   0.33   0.33   1.00    -      -      -      -     retq
 -      -      -      -     0.29   0.57   1.14    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     movl	$.LC4, %edi
 -      -      -     0.43    -      -      -     0.57    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     callq	puts
 -      -      -      -     0.57   1.14   0.29    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     movl	$1, %eax
 -      -      -     0.57    -      -      -     0.43    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     jmp	.L1


Timeline view:
                    0123456789          0123456789          0123456789          0123456789
Index     0123456789          0123456789          0123456789          0123456789          

[0,0]     DeER .    .    .    .    .    .    .    .    .    .    .    .    .    .    .   .   leaq	8(%rsp), %r10
[0,1]     DeER .    .    .    .    .    .    .    .    .    .    .    .    .    .    .   .   andq	$-32, %rsp
[0,2]     D=eeeeeeER.    .    .    .    .    .    .    .    .    .    .    .    .    .   .   pushq	-8(%r10)
[0,3]     D=======eER    .    .    .    .    .    .    .    .    .    .    .    .    .   .   pushq	%rbp
[0,4]     D---------R    .    .    .    .    .    .    .    .    .    .    .    .    .   .   movq	%rsp, %rbp
[0,5]     .D=======eER   .    .    .    .    .    .    .    .    .    .    .    .    .   .   pushq	%r10
[0,6]     .D========eER  .    .    .    .    .    .    .    .    .    .    .    .    .   .   pushq	%rbx
[0,7]     .D=========eER .    .    .    .    .    .    .    .    .    .    .    .    .   .   addq	$-128, %rsp
[0,8]     .DeeeeeE-----R .    .    .    .    .    .    .    .    .    .    .    .    .   .   testb	$-128, __cpu_model+13(%rip)
[0,9]     .D=====eE----R .    .    .    .    .    .    .    .    .    .    .    .    .   .   je	.L10
[0,10]    .DeeeeeeeeE--R .    .    .    .    .    .    .    .    .    .    .    .    .   .   vmovapd	.LC0(%rip), %ymm1
[0,11]    . DeE--------R .    .    .    .    .    .    .    .    .    .    .    .    .   .   movl	$2000000000, %ebx
[0,12]    . DeeeeeeeeE-R .    .    .    .    .    .    .    .    .    .    .    .    .   .   vmovapd	.LC1(%rip), %ymm2
[0,13]    . DeeeeeeeeE-R .    .    .    .    .    .    .    .    .    .    .    .    .   .   vmovapd	.LC2(%rip), %ymm3
[0,14]    . D=eeeeeeeeER .    .    .    .    .    .    .    .    .    .    .    .    .   .   vmovapd	.LC3(%rip), %ymm0
[0,15]    . D=eeeeeeeeE-R.    .    .    .    .    .    .    .    .    .    .    .    .   .   vmovapd	.LC5(%rip), %ymm7
[0,16]    . D==eeeeeeeeER.    .    .    .    .    .    .    .    .    .    .    .    .   .   vmovapd	.LC6(%rip), %ymm6
[0,17]    .  D=eeeeeeeeER.    .    .    .    .    .    .    .    .    .    .    .    .   .   vmovapd	.LC7(%rip), %ymm5
[0,18]    .  D==eeeeeeeeER    .    .    .    .    .    .    .    .    .    .    .    .   .   vmovapd	.LC8(%rip), %ymm4
[0,19]    .  D========eeeeeeeeeeeeeER   .    .    .    .    .    .    .    .    .    .   .   vdivpd	%ymm7, %ymm3, %ymm3
[0,20]    .  D=============eeeeeeeeeeeeeER   .    .    .    .    .    .    .    .    .   .   vdivpd	%ymm6, %ymm2, %ymm2
[0,21]    .  D==================eeeeeeeeeeeeeER   .    .    .    .    .    .    .    .   .   vdivpd	%ymm5, %ymm1, %ymm1
[0,22]    .  D=======================eeeeeeeeeeeeeER   .    .    .    .    .    .    .   .   vdivpd	%ymm4, %ymm0, %ymm0
[0,23]    .   DeE----------------------------------R   .    .    .    .    .    .    .   .   subq	$1, %rbx
[0,24]    .   D=eE---------------------------------R   .    .    .    .    .    .    .   .   jne	.L2
[0,25]    .   D====================eE--------------R   .    .    .    .    .    .    .   .   vmovapd	%ymm3, -144(%rbp)
[0,26]    .   D=========================eE---------R   .    .    .    .    .    .    .   .   vmovapd	%ymm2, -112(%rbp)
[0,27]    .   D==============================eE----R   .    .    .    .    .    .    .   .   vmovapd	%ymm1, -80(%rbp)
[0,28]    .   D===================================eER  .    .    .    .    .    .    .   .   vmovapd	%ymm0, -48(%rbp)
[0,29]    .    DE-----------------------------------R  .    .    .    .    .    .    .   .   vzeroupper
[0,30]    .    D------------------------------------R  .    .    .    .    .    .    .   .   movq	%rbx, %rsi
[0,31]    .    DeE----------------------------------R  .    .    .    .    .    .    .   .   movl	$.LC9, %edi
[0,32]    .    DeE----------------------------------R  .    .    .    .    .    .    .   .   movl	$1, %eax
[0,33]    .    D======eeeeeeeeE---------------------R  .    .    .    .    .    .    .   .   vmovsd	-144(%rbp,%rbx,8), %xmm0
[0,34]    .    DeE----------------------------------R  .    .    .    .    .    .    .   .   addq	$1, %rbx
Truncated display due to cycle limit


Average Wait times (based on the timeline view):
[0]: Executions
[1]: Average time spent waiting in a scheduler's queue
[2]: Average time spent waiting in a scheduler's queue while ready
[3]: Average time elapsed from WB until retire stage

      [0]    [1]    [2]    [3]
0.     10    40.7   0.1    89.1      leaq	8(%rsp), %r10
1.     10    40.7   0.1    89.1      andq	$-32, %rsp
2.     10    39.0   0.0    81.8      pushq	-8(%r10)
3.     10    44.8   0.0    80.9      pushq	%rbp
4.     10    0.0    0.0    126.7     movq	%rsp, %rbp
5.     10    45.6   0.0    80.9      pushq	%r10
6.     10    46.6   0.0    80.0      pushq	%rbx
7.     10    47.0   0.0    79.1      addq	$-128, %rsp
8.     10    1.0    1.0    121.1     testb	$-128, __cpu_model+13(%rip)
9.     10    5.8    0.0    120.1     je	.L10
10.    10    1.1    1.1    117.8     vmovapd	.LC0(%rip), %ymm1
11.    10    1.0    1.0    124.7     movl	$2000000000, %ebx
12.    10    1.4    1.4    117.3     vmovapd	.LC1(%rip), %ymm2
13.    10    1.5    1.5    117.5     vmovapd	.LC2(%rip), %ymm3
14.    10    2.1    2.1    116.9     vmovapd	.LC3(%rip), %ymm0
15.    10    2.4    2.4    116.5     vmovapd	.LC5(%rip), %ymm7
16.    10    3.0    3.0    115.9     vmovapd	.LC6(%rip), %ymm6
17.    10    3.4    3.4    115.3     vmovapd	.LC7(%rip), %ymm5
18.    10    3.9    3.9    114.9     vmovapd	.LC8(%rip), %ymm4
19.    10    26.9   17.3   87.4      vdivpd	%ymm7, %ymm3, %ymm3
20.    10    31.9   21.7   82.9      vdivpd	%ymm6, %ymm2, %ymm2
21.    10    36.7   26.1   79.3      vdivpd	%ymm5, %ymm1, %ymm1
22.    10    41.7   30.6   74.8      vdivpd	%ymm4, %ymm0, %ymm0
23.    10    1.0    1.0    127.3     subq	$1, %rbx
24.    10    2.0    0.0    126.3     jne	.L2
25.    10    46.5   0.0    81.2      vmovapd	%ymm3, -144(%rbp)
26.    10    48.5   0.6    79.2      vmovapd	%ymm2, -112(%rbp)
27.    10    51.2   0.4    76.3      vmovapd	%ymm1, -80(%rbp)
28.    10    54.7   0.3    72.9      vmovapd	%ymm0, -48(%rbp)
29.    10    1.0    1.0    128.3     vzeroupper
30.    10    0.0    0.0    129.3     movq	%rbx, %rsi
31.    10    1.0    1.0    126.7     movl	$.LC9, %edi
32.    10    1.0    1.0    126.7     movl	$1, %eax
33.    10    43.8   0.0    76.7      vmovsd	-144(%rbp,%rbx,8), %xmm0
34.    10    1.1    0.9    126.4     addq	$1, %rbx
35.    10    43.6   0.0    0.0       callq	printf
36.    10    2.0    0.1    140.6     cmpq	$16, %rbx
37.    10    2.4    0.0    139.6     jne	.L4
38.    10    0.0    0.0    143.0     xorl	%eax, %eax
39.    10    42.8   0.0    99.0      subq	$-128, %rsp
40.    10    43.8   0.0    94.0      popq	%rbx
41.    10    38.6   0.0    89.0      popq	%r10
42.    10    43.6   0.0    84.0      popq	%rbp
43.    10    43.5   0.0    89.0      leaq	-8(%r10), %rsp
44.    10    1.0    1.0    127.5     retq
45.    10    1.0    1.0    131.3     movl	$.LC4, %edi
46.    10    44.3   0.0    0.0       callq	puts
47.    10    1.0    1.0    141.6     movl	$1, %eax
48.    10    1.1    1.1    141.5     jmp	.L1
       10    21.0   2.6    102.6     <total>
