warning: found a call in the input assembly sequence.
note: call instructions are not correctly modeled. Assume a latency of 100cy.
warning: found a return instruction in the input assembly sequence.
note: program counter updates are ignored.
Iterations:        10000
Instructions:      370000
Total Cycles:      230103
Total uOps:        380000

Dispatch Width:    6
uOps Per Cycle:    1.65
IPC:               1.61
Block RThroughput: 6.3


Cycles with backend pressure increase [ 21.73% ]
Throughput Bottlenecks: 
  Resource Pressure       [ 0.00% ]
  - Zn3ALU0  [ 0.00% ]
  - Zn3ALU1  [ 0.00% ]
  - Zn3ALU2  [ 0.00% ]
  - Zn3ALU3  [ 0.00% ]
  - Zn3BRU1  [ 0.00% ]
  - Zn3FPP45  [ 0.00% ]
  - Zn3LSU  [ 0.00% ]
  Data Dependencies:      [ 21.73% ]
  - Register Dependencies [ 21.73% ]
  - Memory Dependencies   [ 0.00% ]

Critical sequence based on the simulation:

              Instruction                                 Dependency Information
 +----< 31.   leaq	-8(%r10), %rsp
 |
 |    < loop carried > 
 |
 |      0.    leaq	8(%rsp), %r10
 +----> 1.    andq	$-32, %rsp                        ## REGISTER dependency:  %rsp
 +----> 2.    pushq	-8(%r10)                          ## REGISTER dependency:  %rsp
 +----> 3.    pushq	%rbp                              ## REGISTER dependency:  %rsp
 |      4.    movq	%rsp, %rbp
 +----> 5.    pushq	%r10                              ## REGISTER dependency:  %rsp
 +----> 6.    pushq	%rbx                              ## REGISTER dependency:  %rsp
 +----> 7.    subq	$32, %rsp                         ## REGISTER dependency:  %rsp
 |      8.    testb	$-128, __cpu_model+13(%rip)
 |      9.    je	.L10
 |      10.   vbroadcastsd	.LC4(%rip), %ymm0
 |      11.   vmovapd	.LC2(%rip), %ymm1
 |      12.   movabsq	$8000000000, %rbx
 |      13.   vfmadd132pd	%ymm1, %ymm0, %ymm0
 |      14.   subq	$1, %rbx
 |      15.   jne	.L2
 |      16.   vmovapd	%ymm0, -48(%rbp)
 |      17.   vzeroupper
 |      18.   vmovsd	-48(%rbp,%rbx,8), %xmm0
 |      19.   movq	%rbx, %rsi
 |      20.   movl	$.LC3, %edi
 |      21.   movl	$1, %eax
 |      22.   addq	$1, %rbx
 |      23.   callq	printf
 |      24.   cmpq	$4, %rbx
 |      25.   jne	.L4
 |      26.   xorl	%eax, %eax
 +----> 27.   addq	$32, %rsp                         ## REGISTER dependency:  %rsp
 +----> 28.   popq	%rbx                              ## REGISTER dependency:  %rsp
 +----> 29.   popq	%r10                              ## REGISTER dependency:  %rsp
 |      30.   popq	%rbp
 +----> 31.   leaq	-8(%r10), %rsp                    ## REGISTER dependency:  %r10
 |      32.   retq
 |      33.   movl	$.LC1, %edi
 +----> 34.   callq	puts                              ## REGISTER dependency:  %rsp
 |      35.   movl	$1, %eax
 |      36.   jmp	.L1
 |
 |    < loop carried > 
 |
 +----> 20.   movl	$.LC3, %edi                       ## RESOURCE interference:  Zn3ALU0 [ probability: 0% ]


Instruction Info:
[1]: #uOps
[2]: Latency
[3]: RThroughput
[4]: MayLoad
[5]: MayStore
[6]: HasSideEffects (U)

[1]    [2]    [3]    [4]    [5]    [6]    Instructions:
 1      1     0.33                        leaq	8(%rsp), %r10
 1      1     0.25                        andq	$-32, %rsp
 2      6     1.00    *      *            pushq	-8(%r10)
 1      1     1.00           *            pushq	%rbp
 1      0     0.17                        movq	%rsp, %rbp
 1      1     1.00           *            pushq	%r10
 1      1     1.00           *            pushq	%rbx
 1      1     0.25                        subq	$32, %rsp
 1      5     0.33    *                   testb	$-128, __cpu_model+13(%rip)
 1      1     0.50                        je	.L10
 1      8     0.50    *                   vbroadcastsd	.LC4(%rip), %ymm0
 1      8     0.50    *                   vmovapd	.LC2(%rip), %ymm1
 1      1     1.00                        movabsq	$8000000000, %rbx
 1      4     1.00                        vfmadd132pd	%ymm1, %ymm0, %ymm0
 1      1     0.25                        subq	$1, %rbx
 1      1     0.50                        jne	.L2
 1      1     1.00           *            vmovapd	%ymm0, -48(%rbp)
 1      0     0.25                  U     vzeroupper
 1      8     0.50    *                   vmovsd	-48(%rbp,%rbx,8), %xmm0
 1      0     0.17                        movq	%rbx, %rsi
 1      1     0.50                        movl	$.LC3, %edi
 1      1     0.50                        movl	$1, %eax
 1      1     0.25                        addq	$1, %rbx
 1      1     0.50                        callq	printf
 1      1     0.25                        cmpq	$4, %rbx
 1      1     0.50                        jne	.L4
 1      0     0.17                        xorl	%eax, %eax
 1      1     0.25                        addq	$32, %rsp
 1      5     0.33    *                   popq	%rbx
 1      5     0.33    *                   popq	%r10
 1      5     0.33    *                   popq	%rbp
 1      1     0.33                        leaq	-8(%r10), %rsp
 1      5     0.50                  U     retq
 1      1     0.50                        movl	$.LC1, %edi
 1      1     0.50                        callq	puts
 1      1     0.50                        movl	$1, %eax
 1      1     0.50                        jmp	.L1


Retire Control Unit - number of cycles where we saw N instructions retired:
[# retired], [# cycles]
 0,           170097  (73.9%)
 1,           3  (0.0%)
 2,           10002  (4.3%)
 3,           10002  (4.3%)
 5,           1  (0.0%)
 6,           1  (0.0%)
 8,           39997  (17.4%)

Total ROB Entries:                256
Max Used ROB Entries:             256  ( 100.0% )
Average Used ROB Entries per cy:  251  ( 98.0% )


Resources:
[0]   - Zn3AGU0
[1]   - Zn3AGU1
[2]   - Zn3AGU2
[3]   - Zn3ALU0
[4]   - Zn3ALU1
[5]   - Zn3ALU2
[6]   - Zn3ALU3
[7]   - Zn3BRU1
[8]   - Zn3FPP0
[9]   - Zn3FPP1
[10]  - Zn3FPP2
[11]  - Zn3FPP3
[12.0] - Zn3FPP45
[12.1] - Zn3FPP45
[13]  - Zn3FPSt
[14.0] - Zn3LSU
[14.1] - Zn3LSU
[14.2] - Zn3LSU
[15.0] - Zn3Load
[15.1] - Zn3Load
[15.2] - Zn3Load
[16.0] - Zn3Store
[16.1] - Zn3Store


Resource pressure per iteration:
[0]    [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    [10]   [11]   [12.0] [12.1] [13]   [14.0] [14.1] [14.2] [15.0] [15.1] [15.2] [16.0] [16.1] 
4.00   4.00   4.00   5.00   4.00   6.00   7.00   4.00   1.50   1.00   0.75   0.75   2.00   2.00   1.00   6.00   6.00   6.00   3.00   3.00   3.00   4.50   4.50   

Resource pressure by instruction:
[0]    [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    [10]   [11]   [12.0] [12.1] [13]   [14.0] [14.1] [14.2] [15.0] [15.1] [15.2] [16.0] [16.1] Instructions:
0.33   0.33   0.33    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     leaq	8(%rsp), %r10
 -      -      -      -      -     1.00    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     andq	$-32, %rsp
0.67   0.67   0.67    -      -      -      -      -      -      -      -      -      -      -      -     1.00   1.00   1.00   1.00    -      -     1.00   1.00   pushq	-8(%r10)
0.33   0.33   0.33    -      -      -      -      -      -      -      -      -      -      -      -     0.67   0.67   0.67    -      -      -     1.00   1.00   pushq	%rbp
 -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     movq	%rsp, %rbp
0.33   0.33   0.33    -      -      -      -      -      -      -      -      -      -      -      -     0.67   0.67   0.67    -      -      -     1.00   1.00   pushq	%r10
0.33   0.33   0.33    -      -      -      -      -      -      -      -      -      -      -      -     0.67   0.67   0.67    -      -      -     1.00   1.00   pushq	%rbx
 -      -      -      -      -      -     1.00    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     subq	$32, %rsp
0.33   0.33   0.33    -     1.00    -      -      -      -      -      -      -      -      -      -     0.33   0.33   0.33    -     1.00    -      -      -     testb	$-128, __cpu_model+13(%rip)
 -      -      -     1.00    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     je	.L10
 -      -      -      -      -      -      -      -      -     0.25   0.75    -      -     1.00    -     0.33   0.33   0.33   1.00    -      -      -      -     vbroadcastsd	.LC4(%rip), %ymm0
 -      -      -      -      -      -      -      -      -      -      -      -     1.00    -      -     0.33   0.33   0.33    -      -     1.00    -      -     vmovapd	.LC2(%rip), %ymm1
 -      -      -      -      -      -     4.00    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     movabsq	$8000000000, %rbx
 -      -      -      -      -      -      -      -     1.50   0.50    -      -      -      -      -      -      -      -      -      -      -      -      -     vfmadd132pd	%ymm1, %ymm0, %ymm0
 -      -      -      -     1.00    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     subq	$1, %rbx
 -      -      -      -      -      -      -     1.00    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     jne	.L2
 -      -      -      -      -      -      -      -      -      -      -      -      -     1.00   1.00   0.33   0.33   0.33    -      -      -     0.50   0.50   vmovapd	%ymm0, -48(%rbp)
 -      -      -      -      -      -      -      -      -     0.25    -     0.75    -      -      -      -      -      -      -      -      -      -      -     vzeroupper
 -      -      -      -      -      -      -      -      -      -      -      -     1.00    -      -     0.33   0.33   0.33    -      -     1.00    -      -     vmovsd	-48(%rbp,%rbx,8), %xmm0
 -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     movq	%rbx, %rsi
 -      -      -     2.00    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     movl	$.LC3, %edi
 -      -      -      -      -     2.00    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     movl	$1, %eax
 -      -      -      -     1.00    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     addq	$1, %rbx
 -      -      -      -      -      -      -     1.00    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     callq	printf
 -      -      -      -      -     1.00    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     cmpq	$4, %rbx
 -      -      -     1.00    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     jne	.L4
 -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     xorl	%eax, %eax
 -      -      -      -     1.00    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     addq	$32, %rsp
0.33   0.33   0.33    -      -      -      -      -      -      -      -      -      -      -      -     0.33   0.33   0.33    -     1.00    -      -      -     popq	%rbx
0.33   0.33   0.33    -      -      -      -      -      -      -      -      -      -      -      -     0.33   0.33   0.33    -      -     1.00    -      -     popq	%r10
0.33   0.33   0.33    -      -      -      -      -      -      -      -      -      -      -      -     0.33   0.33   0.33    -     1.00    -      -      -     popq	%rbp
0.33   0.33   0.33    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     leaq	-8(%r10), %rsp
0.33   0.33   0.33    -      -      -      -     1.00    -      -      -      -      -      -      -     0.33   0.33   0.33   1.00    -      -      -      -     retq
 -      -      -      -      -      -     2.00    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     movl	$.LC1, %edi
 -      -      -      -      -      -      -     1.00    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     callq	puts
 -      -      -      -      -     2.00    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     movl	$1, %eax
 -      -      -     1.00    -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -      -     jmp	.L1


Timeline view:
                    0123456789          0123456789          0123456789          0123456789
Index     0123456789          0123456789          0123456789          0123456789          

[0,0]     DeER .    .    .    .    .    .    .    .    .    .    .    .    .    .    .   .   leaq	8(%rsp), %r10
[0,1]     DeER .    .    .    .    .    .    .    .    .    .    .    .    .    .    .   .   andq	$-32, %rsp
[0,2]     D=eeeeeeER.    .    .    .    .    .    .    .    .    .    .    .    .    .   .   pushq	-8(%r10)
[0,3]     D=======eER    .    .    .    .    .    .    .    .    .    .    .    .    .   .   pushq	%rbp
[0,4]     D---------R    .    .    .    .    .    .    .    .    .    .    .    .    .   .   movq	%rsp, %rbp
[0,5]     .D=======eER   .    .    .    .    .    .    .    .    .    .    .    .    .   .   pushq	%r10
[0,6]     .D========eER  .    .    .    .    .    .    .    .    .    .    .    .    .   .   pushq	%rbx
[0,7]     .D=========eER .    .    .    .    .    .    .    .    .    .    .    .    .   .   subq	$32, %rsp
[0,8]     .DeeeeeE-----R .    .    .    .    .    .    .    .    .    .    .    .    .   .   testb	$-128, __cpu_model+13(%rip)
[0,9]     .D=====eE----R .    .    .    .    .    .    .    .    .    .    .    .    .   .   je	.L10
[0,10]    .DeeeeeeeeE--R .    .    .    .    .    .    .    .    .    .    .    .    .   .   vbroadcastsd	.LC4(%rip), %ymm0
[0,11]    . DeeeeeeeeE-R .    .    .    .    .    .    .    .    .    .    .    .    .   .   vmovapd	.LC2(%rip), %ymm1
[0,12]    . DeE--------R .    .    .    .    .    .    .    .    .    .    .    .    .   .   movabsq	$8000000000, %rbx
[0,13]    . D========eeeeER   .    .    .    .    .    .    .    .    .    .    .    .   .   vfmadd132pd	%ymm1, %ymm0, %ymm0
[0,14]    . D=eE----------R   .    .    .    .    .    .    .    .    .    .    .    .   .   subq	$1, %rbx
[0,15]    . D==eE---------R   .    .    .    .    .    .    .    .    .    .    .    .   .   jne	.L2
[0,16]    . D============eER  .    .    .    .    .    .    .    .    .    .    .    .   .   vmovapd	%ymm0, -48(%rbp)
[0,17]    .  DE------------R  .    .    .    .    .    .    .    .    .    .    .    .   .   vzeroupper
[0,18]    .  D========eeeeeeeeER   .    .    .    .    .    .    .    .    .    .    .   .   vmovsd	-48(%rbp,%rbx,8), %xmm0
[0,19]    .  D-----------------R   .    .    .    .    .    .    .    .    .    .    .   .   movq	%rbx, %rsi
[0,20]    .  DeE---------------R   .    .    .    .    .    .    .    .    .    .    .   .   movl	$.LC3, %edi
[0,21]    .  DeE---------------R   .    .    .    .    .    .    .    .    .    .    .   .   movl	$1, %eax
[0,22]    .  D=eE--------------R   .    .    .    .    .    .    .    .    .    .    .   .   addq	$1, %rbx
Truncated display due to cycle limit


Average Wait times (based on the timeline view):
[0]: Executions
[1]: Average time spent waiting in a scheduler's queue
[2]: Average time spent waiting in a scheduler's queue while ready
[3]: Average time elapsed from WB until retire stage

      [0]    [1]    [2]    [3]
0.     10    59.3   0.1    89.1      leaq	8(%rsp), %r10
1.     10    59.3   0.1    89.1      andq	$-32, %rsp
2.     10    59.9   0.0    83.7      pushq	-8(%r10)
3.     10    65.6   0.0    82.8      pushq	%rbp
4.     10    0.0    0.0    149.4     movq	%rsp, %rbp
5.     10    66.3   0.0    82.8      pushq	%r10
6.     10    58.9   0.0    81.9      pushq	%rbx
7.     10    59.7   0.0    81.0      subq	$32, %rsp
8.     10    1.0    1.0    135.7     testb	$-128, __cpu_model+13(%rip)
9.     10    5.8    0.0    134.7     je	.L10
10.    10    1.0    1.0    132.5     vbroadcastsd	.LC4(%rip), %ymm0
11.    10    1.4    1.4    131.8     vmovapd	.LC2(%rip), %ymm1
12.    10    1.0    1.0    138.9     movabsq	$8000000000, %rbx
13.    10    8.9    0.0    129.0     vfmadd132pd	%ymm1, %ymm0, %ymm0
14.    10    1.8    0.0    139.1     subq	$1, %rbx
15.    10    2.7    0.1    138.0     jne	.L2
16.    10    59.8   0.0    81.0      vmovapd	%ymm0, -48(%rbp)
17.    10    1.0    1.0    140.5     vzeroupper
18.    10    58.9   0.0    74.7      vmovsd	-48(%rbp,%rbx,8), %xmm0
19.    10    0.0    0.0    141.4     movq	%rbx, %rsi
20.    10    1.1    1.1    139.3     movl	$.LC3, %edi
21.    10    1.3    1.3    139.8     movl	$1, %eax
22.    10    1.9    0.3    139.2     addq	$1, %rbx
23.    10    58.2   0.0    0.0       callq	printf
24.    10    2.0    0.3    152.2     cmpq	$4, %rbx
25.    10    2.9    0.1    151.1     jne	.L4
26.    10    0.0    0.0    155.0     xorl	%eax, %eax
27.    10    54.8   0.0    99.0      addq	$32, %rsp
28.    10    55.8   0.0    94.0      popq	%rbx
29.    10    60.2   0.0    89.0      popq	%r10
30.    10    65.2   0.0    84.0      popq	%rbp
31.    10    65.0   0.0    89.0      leaq	-8(%r10), %rsp
32.    10    1.3    1.3    148.7     retq
33.    10    1.0    1.0    152.8     movl	$.LC1, %edi
34.    10    65.8   0.0    0.0       callq	puts
35.    10    1.0    1.0    163.2     movl	$1, %eax
36.    10    1.5    1.5    162.7     jmp	.L1
       10    27.3   0.4    113.9     <total>
