warning: found a call in the input assembly sequence.
note: call instructions are not correctly modeled. Assume a latency of 100cy.
warning: found a return instruction in the input assembly sequence.
note: program counter updates are ignored.
Iterations:        10000
Instructions:      480000
Total Cycles:      345613
Total uOps:        760000

Dispatch Width:    6
uOps Per Cycle:    2.20
IPC:               1.39
Block RThroughput: 20.0


Cycles with backend pressure increase [ 27.74% ]
Throughput Bottlenecks: 
  Resource Pressure       [ 15.87% ]
  - ICXFPDivider  [ 7.39% ]
  - ICXPort0  [ 5.09% ]
  - ICXPort1  [ 0.20% ]
  - ICXPort2  [ 5.39% ]
  - ICXPort3  [ 5.39% ]
  - ICXPort4  [ 2.79% ]
  - ICXPort5  [ 0.20% ]
  - ICXPort6  [ 1.20% ]
  - ICXPort7  [ 0.40% ]
  Data Dependencies:      [ 24.75% ]
  - Register Dependencies [ 24.75% ]
  - Memory Dependencies   [ 0.00% ]

Critical sequence based on the simulation:

              Instruction                                 Dependency Information
 +----< 42.   leaq	-8(%r10), %rsp
 |
 |    < loop carried > 
 |
 |      0.    leaq	8(%rsp), %r10
 +----> 1.    andq	$-32, %rsp                        ## REGISTER dependency:  %rsp
 +----> 2.    pushq	-8(%r10)                          ## REGISTER dependency:  %rsp
 +----> 3.    pushq	%rbp                              ## REGISTER dependency:  %rsp
 |      4.    movq	%rsp, %rbp
 +----> 5.    pushq	%r10                              ## REGISTER dependency:  %rsp
 |      6.    pushq	%rbx
 |      7.    addq	$-128, %rsp
 |      8.    testb	$-128, __cpu_model+13(%rip)
 |      9.    je	.L10
 |      10.   vmovapd	.LC0(%rip), %ymm2
 |      11.   movl	$2000000000, %ebx
 |      12.   vmovapd	.LC1(%rip), %ymm3
 |      13.   vmovapd	.LC2(%rip), %ymm1
 |      14.   vmovapd	.LC4(%rip), %ymm7
 |      15.   vmovapd	.LC5(%rip), %ymm6
 |      16.   vmovapd	.LC6(%rip), %ymm5
 +----> 17.   vdivpd	%ymm7, %ymm3, %ymm3               ## RESOURCE interference:  ICXPort0 [ probability: 0% ]
 |      18.   vxorpd	%xmm0, %xmm0, %xmm0
 +----> 19.   vdivpd	%ymm6, %ymm2, %ymm2               ## RESOURCE interference:  ICXFPDivider [ probability: 99% ]
 +----> 20.   vdivpd	%ymm5, %ymm1, %ymm1               ## RESOURCE interference:  ICXFPDivider [ probability: 100% ]
 |      21.   vdivpd	%ymm0, %ymm4, %ymm4
 |      22.   subq	$1, %rbx
 |      23.   jne	.L2
 |      24.   vmovapd	%ymm3, -144(%rbp)
 |      25.   vmovapd	%ymm2, -112(%rbp)
 +----> 26.   vmovapd	%ymm1, -80(%rbp)                  ## REGISTER dependency:  %ymm1
        27.   vmovapd	%ymm4, -48(%rbp)
        28.   vzeroupper
        29.   movq	%rbx, %rsi
        30.   movl	$.LC7, %edi
        31.   movl	$1, %eax
        32.   vmovsd	-144(%rbp,%rbx,8), %xmm0
        33.   addq	$1, %rbx
        34.   callq	printf
        35.   cmpq	$16, %rbx
        36.   jne	.L4
        37.   xorl	%eax, %eax
        38.   subq	$-128, %rsp
        39.   popq	%rbx
        40.   popq	%r10
        41.   popq	%rbp
        42.   leaq	-8(%r10), %rsp
        43.   retq
        44.   movl	$.LC3, %edi
        45.   callq	puts
        46.   movl	$1, %eax
        47.   jmp	.L1


Instruction Info:
[1]: #uOps
[2]: Latency
[3]: RThroughput
[4]: MayLoad
[5]: MayStore
[6]: HasSideEffects (U)

[1]    [2]    [3]    [4]    [5]    [6]    Instructions:
 1      1     0.50                        leaq	8(%rsp), %r10
 1      1     0.25                        andq	$-32, %rsp
 4      6     1.00    *      *            pushq	-8(%r10)
 3      2     1.00           *            pushq	%rbp
 1      1     0.25                        movq	%rsp, %rbp
 3      2     1.00           *            pushq	%r10
 3      2     1.00           *            pushq	%rbx
 1      1     0.25                        addq	$-128, %rsp
 2      6     0.50    *                   testb	$-128, __cpu_model+13(%rip)
 1      1     0.50                        je	.L10
 1      7     0.50    *                   vmovapd	.LC0(%rip), %ymm2
 1      1     0.25                        movl	$2000000000, %ebx
 1      7     0.50    *                   vmovapd	.LC1(%rip), %ymm3
 1      7     0.50    *                   vmovapd	.LC2(%rip), %ymm1
 1      7     0.50    *                   vmovapd	.LC4(%rip), %ymm7
 1      7     0.50    *                   vmovapd	.LC5(%rip), %ymm6
 1      7     0.50    *                   vmovapd	.LC6(%rip), %ymm5
 1      14    5.00                        vdivpd	%ymm7, %ymm3, %ymm3
 1      0     0.17                        vxorpd	%xmm0, %xmm0, %xmm0
 1      14    5.00                        vdivpd	%ymm6, %ymm2, %ymm2
 1      14    5.00                        vdivpd	%ymm5, %ymm1, %ymm1
 1      14    5.00                        vdivpd	%ymm0, %ymm4, %ymm4
 1      1     0.25                        subq	$1, %rbx
 1      1     0.50                        jne	.L2
 2      1     1.00           *            vmovapd	%ymm3, -144(%rbp)
 2      1     1.00           *            vmovapd	%ymm2, -112(%rbp)
 2      1     1.00           *            vmovapd	%ymm1, -80(%rbp)
 2      1     1.00           *            vmovapd	%ymm4, -48(%rbp)
 4      0     0.67                  U     vzeroupper
 1      1     0.25                        movq	%rbx, %rsi
 1      1     0.25                        movl	$.LC7, %edi
 1      1     0.25                        movl	$1, %eax
 1      5     0.50    *                   vmovsd	-144(%rbp,%rbx,8), %xmm0
 1      1     0.25                        addq	$1, %rbx
 4      3     1.00                        callq	printf
 1      1     0.25                        cmpq	$16, %rbx
 1      1     0.50                        jne	.L4
 1      0     0.17                        xorl	%eax, %eax
 1      1     0.25                        subq	$-128, %rsp
 2      6     0.50    *                   popq	%rbx
 2      6     0.50    *                   popq	%r10
 2      6     0.50    *                   popq	%rbp
 1      1     0.50                        leaq	-8(%r10), %rsp
 3      7     1.00                  U     retq
 1      1     0.25                        movl	$.LC3, %edi
 4      3     1.00                        callq	puts
 1      1     0.25                        movl	$1, %eax
 1      1     0.50                        jmp	.L1


Retire Control Unit - number of cycles where we saw N instructions retired:
[# retired], [# cycles]
 0,           325601  (94.2%)
 1,           7  (0.0%)
 2,           2  (0.0%)
 3,           1  (0.0%)
 6,           1  (0.0%)
 7,           1  (0.0%)
 10,          1  (0.0%)
 11,          10000  (2.9%)
 37,          9999  (2.9%)

Total ROB Entries:                224
Max Used ROB Entries:             224  ( 100.0% )
Average Used ROB Entries per cy:  215  ( 96.0% )


Resources:
[0]   - ICXDivider
[1]   - ICXFPDivider
[2]   - ICXPort0
[3]   - ICXPort1
[4]   - ICXPort2
[5]   - ICXPort3
[6]   - ICXPort4
[7]   - ICXPort5
[8]   - ICXPort6
[9]   - ICXPort7
[10]  - ICXPort8
[11]  - ICXPort9


Resource pressure per iteration:
[0]    [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    [10]   [11]   
 -     20.00  9.69   8.97   8.17   8.24   10.00  9.10   9.24   6.59    -      -     

Resource pressure by instruction:
[0]    [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    [10]   [11]   Instructions:
 -      -      -     0.76    -      -      -     0.24    -      -      -      -     leaq	8(%rsp), %r10
 -      -     0.28   0.10    -      -      -     0.27   0.34    -      -      -     andq	$-32, %rsp
 -      -     0.17   0.24   0.72   0.59   1.00   0.41   0.17   0.69    -      -     pushq	-8(%r10)
 -      -      -     0.34    -     0.10   1.00   0.66    -     0.90    -      -     pushq	%rbp
 -      -     0.17   0.31    -      -      -     0.24   0.28    -      -      -     movq	%rsp, %rbp
 -      -     0.03   0.24   0.17   0.17   1.00   0.41   0.31   0.66    -      -     pushq	%r10
 -      -      -     0.41   0.17   0.66   1.00   0.34   0.24   0.17    -      -     pushq	%rbx
 -      -     0.10   0.34    -      -      -     0.24   0.31    -      -      -     addq	$-128, %rsp
 -      -     0.38   0.14   0.69   0.31    -     0.38   0.10    -      -      -     testb	$-128, __cpu_model+13(%rip)
 -      -     0.62    -      -      -      -      -     0.38    -      -      -     je	.L10
 -      -      -      -     0.31   0.69    -      -      -      -      -      -     vmovapd	.LC0(%rip), %ymm2
 -      -     0.14   0.41    -      -      -     0.14   0.31    -      -      -     movl	$2000000000, %ebx
 -      -      -      -     0.65   0.35    -      -      -      -      -      -     vmovapd	.LC1(%rip), %ymm3
 -      -      -      -     0.28   0.72    -      -      -      -      -      -     vmovapd	.LC2(%rip), %ymm1
 -      -      -      -     0.72   0.28    -      -      -      -      -      -     vmovapd	.LC4(%rip), %ymm7
 -      -      -      -     0.28   0.72    -      -      -      -      -      -     vmovapd	.LC5(%rip), %ymm6
 -      -      -      -     0.66   0.35    -      -      -      -      -      -     vmovapd	.LC6(%rip), %ymm5
 -     5.00   1.00    -      -      -      -      -      -      -      -      -     vdivpd	%ymm7, %ymm3, %ymm3
 -      -      -      -      -      -      -      -      -      -      -      -     vxorpd	%xmm0, %xmm0, %xmm0
 -     5.00   1.00    -      -      -      -      -      -      -      -      -     vdivpd	%ymm6, %ymm2, %ymm2
 -     5.00   1.00    -      -      -      -      -      -      -      -      -     vdivpd	%ymm5, %ymm1, %ymm1
 -     5.00   1.00    -      -      -      -      -      -      -      -      -     vdivpd	%ymm0, %ymm4, %ymm4
 -      -      -     0.17    -      -      -     0.31   0.52    -      -      -     subq	$1, %rbx
 -      -     0.28    -      -      -      -      -     0.72    -      -      -     jne	.L2
 -      -      -      -      -     0.07   1.00    -      -     0.93    -      -     vmovapd	%ymm3, -144(%rbp)
 -      -      -      -     0.24   0.45   1.00    -      -     0.31    -      -     vmovapd	%ymm2, -112(%rbp)
 -      -      -      -     0.10   0.24   1.00    -      -     0.66    -      -     vmovapd	%ymm1, -80(%rbp)
 -      -      -      -     0.07   0.21   1.00    -      -     0.72    -      -     vmovapd	%ymm4, -48(%rbp)
 -      -      -      -      -      -      -      -      -      -      -      -     vzeroupper
 -      -      -     0.69    -      -      -     0.31    -      -      -      -     movq	%rbx, %rsi
 -      -      -     0.34    -      -      -     0.38   0.28    -      -      -     movl	$.LC7, %edi
 -      -     0.10   0.38    -      -      -     0.28   0.24    -      -      -     movl	$1, %eax
 -      -      -      -     0.79   0.21    -      -      -      -      -      -     vmovsd	-144(%rbp,%rbx,8), %xmm0
 -      -     0.21   0.28    -      -      -     0.24   0.28    -      -      -     addq	$1, %rbx
 -      -     0.28   0.10   0.07   0.10   1.00   0.72   0.90   0.83    -      -     callq	printf
 -      -     0.24   0.52    -      -      -     0.14   0.10    -      -      -     cmpq	$16, %rbx
 -      -     0.48    -      -      -      -      -     0.52    -      -      -     jne	.L4
 -      -      -      -      -      -      -      -      -      -      -      -     xorl	%eax, %eax
 -      -     0.14   0.38    -      -      -     0.41   0.07    -      -      -     subq	$-128, %rsp
 -      -      -     0.41   0.52   0.48    -     0.41   0.17    -      -      -     popq	%rbx
 -      -     0.07   0.41   0.55   0.45    -     0.21   0.31    -      -      -     popq	%r10
 -      -     0.14   0.21   0.41   0.59    -     0.41   0.24    -      -      -     popq	%rbp
 -      -      -     0.62    -      -      -     0.38    -      -      -      -     leaq	-8(%r10), %rsp
 -      -     0.31   0.28   0.69   0.31    -     0.41   1.00    -      -      -     retq
 -      -     0.38   0.31    -      -      -     0.21   0.10    -      -      -     movl	$.LC3, %edi
 -      -     0.55   0.17   0.07   0.21   1.00   0.62   0.65   0.72    -      -     callq	puts
 -      -     0.17   0.38    -      -      -     0.31   0.14    -      -      -     movl	$1, %eax
 -      -     0.45    -      -      -      -      -     0.55    -      -      -     jmp	.L1


Timeline view:
                    0123456789          0123456789          0123456789          0123456789
Index     0123456789          0123456789          0123456789          0123456789          

[0,0]     DeER .    .    .    .    .    .    .    .    .    .    .    .    .    .    .   .   leaq	8(%rsp), %r10
[0,1]     DeER .    .    .    .    .    .    .    .    .    .    .    .    .    .    .   .   andq	$-32, %rsp
[0,2]     D=eeeeeeER.    .    .    .    .    .    .    .    .    .    .    .    .    .   .   pushq	-8(%r10)
[0,3]     .D======eeER   .    .    .    .    .    .    .    .    .    .    .    .    .   .   pushq	%rbp
[0,4]     .D========eER  .    .    .    .    .    .    .    .    .    .    .    .    .   .   movq	%rsp, %rbp
[0,5]     . D=======eeER .    .    .    .    .    .    .    .    .    .    .    .    .   .   pushq	%r10
[0,6]     . D=========eeER    .    .    .    .    .    .    .    .    .    .    .    .   .   pushq	%rbx
[0,7]     .  D==========eER   .    .    .    .    .    .    .    .    .    .    .    .   .   addq	$-128, %rsp
[0,8]     .  DeeeeeeE-----R   .    .    .    .    .    .    .    .    .    .    .    .   .   testb	$-128, __cpu_model+13(%rip)
[0,9]     .  D======eE----R   .    .    .    .    .    .    .    .    .    .    .    .   .   je	.L10
[0,10]    .  DeeeeeeeE----R   .    .    .    .    .    .    .    .    .    .    .    .   .   vmovapd	.LC0(%rip), %ymm2
[0,11]    .  DeE----------R   .    .    .    .    .    .    .    .    .    .    .    .   .   movl	$2000000000, %ebx
[0,12]    .   DeeeeeeeE---R   .    .    .    .    .    .    .    .    .    .    .    .   .   vmovapd	.LC1(%rip), %ymm3
[0,13]    .   DeeeeeeeE---R   .    .    .    .    .    .    .    .    .    .    .    .   .   vmovapd	.LC2(%rip), %ymm1
[0,14]    .   D=eeeeeeeE--R   .    .    .    .    .    .    .    .    .    .    .    .   .   vmovapd	.LC4(%rip), %ymm7
[0,15]    .   D=eeeeeeeE--R   .    .    .    .    .    .    .    .    .    .    .    .   .   vmovapd	.LC5(%rip), %ymm6
[0,16]    .   D==eeeeeeeE-R   .    .    .    .    .    .    .    .    .    .    .    .   .   vmovapd	.LC6(%rip), %ymm5
[0,17]    .   D========eeeeeeeeeeeeeeER .    .    .    .    .    .    .    .    .    .   .   vdivpd	%ymm7, %ymm3, %ymm3
[0,18]    .    D----------------------R .    .    .    .    .    .    .    .    .    .   .   vxorpd	%xmm0, %xmm0, %xmm0
[0,19]    .    D============eeeeeeeeeeeeeeER .    .    .    .    .    .    .    .    .   .   vdivpd	%ymm6, %ymm2, %ymm2
[0,20]    .    D=================eeeeeeeeeeeeeeER .    .    .    .    .    .    .    .   .   vdivpd	%ymm5, %ymm1, %ymm1
[0,21]    .    DeeeeeeeeeeeeeeE-----------------R .    .    .    .    .    .    .    .   .   vdivpd	%ymm0, %ymm4, %ymm4
[0,22]    .    DeE------------------------------R .    .    .    .    .    .    .    .   .   subq	$1, %rbx
[0,23]    .    D=eE-----------------------------R .    .    .    .    .    .    .    .   .   jne	.L2
[0,24]    .    .D====================eE---------R .    .    .    .    .    .    .    .   .   vmovapd	%ymm3, -144(%rbp)
[0,25]    .    .D=========================eE----R .    .    .    .    .    .    .    .   .   vmovapd	%ymm2, -112(%rbp)
[0,26]    .    .D==============================eER.    .    .    .    .    .    .    .   .   vmovapd	%ymm1, -80(%rbp)
[0,27]    .    . D==============================eER    .    .    .    .    .    .    .   .   vmovapd	%ymm4, -48(%rbp)
[0,28]    .    . D--------------------------------R    .    .    .    .    .    .    .   .   vzeroupper
[0,29]    .    .  DeE-----------------------------R    .    .    .    .    .    .    .   .   movq	%rbx, %rsi
[0,30]    .    .  DeE-----------------------------R    .    .    .    .    .    .    .   .   movl	$.LC7, %edi
[0,31]    .    .  DeE-----------------------------R    .    .    .    .    .    .    .   .   movl	$1, %eax
[0,32]    .    .  D==eeeeeE-----------------------R    .    .    .    .    .    .    .   .   vmovsd	-144(%rbp,%rbx,8), %xmm0
[0,33]    .    .  DeE-----------------------------R    .    .    .    .    .    .    .   .   addq	$1, %rbx
Truncated display due to cycle limit


Average Wait times (based on the timeline view):
[0]: Executions
[1]: Average time spent waiting in a scheduler's queue
[2]: Average time spent waiting in a scheduler's queue while ready
[3]: Average time elapsed from WB until retire stage

      [0]    [1]    [2]    [3]
0.     10    11.8   0.4    88.9      leaq	8(%rsp), %r10
1.     10    11.9   0.5    88.8      andq	$-32, %rsp
2.     10    15.0   0.3    81.0      pushq	-8(%r10)
3.     10    20.0   0.0    79.2      pushq	%rbp
4.     10    22.0   0.0    78.3      movq	%rsp, %rbp
5.     10    21.0   0.0    77.4      pushq	%r10
6.     10    23.0   0.0    75.6      pushq	%rbx
7.     10    24.0   0.0    74.7      addq	$-128, %rsp
8.     10    1.0    1.0    92.7      testb	$-128, __cpu_model+13(%rip)
9.     10    7.0    0.0    91.7      je	.L10
10.    10    1.2    1.2    91.5      vmovapd	.LC0(%rip), %ymm2
11.    10    1.0    1.0    97.7      movl	$2000000000, %ebx
12.    10    1.0    1.0    90.7      vmovapd	.LC1(%rip), %ymm3
13.    10    1.2    1.2    90.5      vmovapd	.LC2(%rip), %ymm1
14.    10    2.0    2.0    89.7      vmovapd	.LC4(%rip), %ymm7
15.    10    2.3    2.3    89.4      vmovapd	.LC5(%rip), %ymm6
16.    10    3.0    3.0    88.7      vmovapd	.LC6(%rip), %ymm5
17.    10    11.2   2.2    74.7      vdivpd	%ymm7, %ymm3, %ymm3
18.    10    0.0    0.0    98.9      vxorpd	%xmm0, %xmm0, %xmm0
19.    10    15.3   7.0    70.1      vdivpd	%ymm6, %ymm2, %ymm2
20.    10    20.3   11.3   65.6      vdivpd	%ymm5, %ymm1, %ymm1
21.    10    9.9    9.9    76.0      vdivpd	%ymm0, %ymm4, %ymm4
22.    10    1.0    1.0    97.9      subq	$1, %rbx
23.    10    2.0    0.0    96.9      jne	.L2
24.    10    27.9   0.3    70.0      vmovapd	%ymm3, -144(%rbp)
25.    10    31.7   0.3    66.2      vmovapd	%ymm2, -112(%rbp)
26.    10    35.5   0.2    62.5      vmovapd	%ymm1, -80(%rbp)
27.    10    35.9   0.9    61.2      vmovapd	%ymm4, -48(%rbp)
28.    10    0.0    0.0    98.1      vzeroupper
29.    10    1.0    1.0    95.1      movq	%rbx, %rsi
30.    10    1.0    1.0    82.3      movl	$.LC7, %edi
31.    10    1.0    1.0    82.3      movl	$1, %eax
32.    10    7.6    0.7    71.7      vmovsd	-144(%rbp,%rbx,8), %xmm0
33.    10    1.2    1.2    82.1      addq	$1, %rbx
34.    10    9.1    0.6    0.0       callq	printf
35.    10    1.2    0.0    106.9     cmpq	$16, %rbx
36.    10    2.2    0.0    105.9     jne	.L4
37.    10    0.0    0.0    108.1     xorl	%eax, %eax
38.    10    8.3    0.5    98.8      subq	$-128, %rsp
39.    10    9.3    0.0    92.8      popq	%rbx
40.    10    15.3   0.0    86.8      popq	%r10
41.    10    20.3   0.0    80.8      popq	%rbp
42.    10    20.3   0.0    85.8      leaq	-8(%r10), %rsp
43.    10    1.2    1.2    91.1      retq
44.    10    1.1    1.1    96.9      movl	$.LC3, %edi
45.    10    12.8   0.3    0.0       callq	puts
46.    10    1.1    1.1    110.7     movl	$1, %eax
47.    10    1.6    1.6    109.9     jmp	.L1
       10    9.9    1.2    83.2      <total>
