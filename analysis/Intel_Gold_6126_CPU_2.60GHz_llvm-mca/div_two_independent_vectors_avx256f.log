warning: found a call in the input assembly sequence.
note: call instructions are not correctly modeled. Assume a latency of 100cy.
warning: found a return instruction in the input assembly sequence.
note: program counter updates are ignored.
Iterations:        10000
Instructions:      470000
Total Cycles:      346766
Total uOps:        770000

Dispatch Width:    6
uOps Per Cycle:    2.22
IPC:               1.36
Block RThroughput: 12.8


Cycles with backend pressure increase [ 25.95% ]
Throughput Bottlenecks: 
  Resource Pressure       [ 9.61% ]
  - SKXFPDivider  [ 5.77% ]
  - SKXPort0  [ 0.00% ]
  - SKXPort2  [ 2.88% ]
  - SKXPort3  [ 2.88% ]
  - SKXPort4  [ 0.96% ]
  - SKXPort6  [ 0.00% ]
  Data Dependencies:      [ 25.95% ]
  - Register Dependencies [ 25.95% ]
  - Memory Dependencies   [ 0.00% ]

Critical sequence based on the simulation:

              Instruction                                 Dependency Information
 +----< 44.   callq	puts
 |
 |    < loop carried > 
 |
 |      0.    leaq	8(%rsp), %r10
 +----> 1.    andq	$-32, %rsp                        ## RESOURCE interference:  SKXPort0 [ probability: 99% ]
 +----> 2.    pushq	-8(%r10)                          ## REGISTER dependency:  %rsp
 +----> 3.    pushq	%rbp                              ## REGISTER dependency:  %rsp
 |      4.    movq	%rsp, %rbp
 +----> 5.    pushq	%r10                              ## REGISTER dependency:  %rsp
 |      6.    pushq	%rbx
 |      7.    subq	$96, %rsp
 |      8.    testb	$-128, __cpu_model+13(%rip)
 |      9.    je	.L10
 |      10.   vmovapd	.LC0(%rip), %ymm0
 |      11.   movl	$4000000000, %ebx
 |      12.   vmovapd	.LC1(%rip), %ymm1
 |      13.   vmovapd	.LC3(%rip), %ymm3
 |      14.   vmovapd	.LC4(%rip), %ymm2
 +----> 15.   vdivpd	%ymm3, %ymm1, %ymm1               ## RESOURCE interference:  SKXPort0 [ probability: 0% ]
 +----> 16.   vdivpd	%ymm2, %ymm0, %ymm0               ## RESOURCE interference:  SKXFPDivider [ probability: 100% ]
 |      17.   subq	$1, %rbx
 |      18.   jne	.L2
 |      19.   vmovapd	%ymm1, -80(%rbp)
 +----> 20.   vmovapd	%ymm0, -48(%rbp)                  ## REGISTER dependency:  %ymm0
        21.   vzeroupper
        22.   vmovsd	-80(%rbp,%rbx,8), %xmm0
        23.   movq	%rbx, %rsi
        24.   movl	$.LC5, %edi
        25.   movl	$1, %eax
        26.   vmovsd	%xmm0, -88(%rbp)
        27.   callq	printf
        28.   vmovsd	-88(%rbp), %xmm0
        29.   movq	%rbx, %rsi
        30.   movl	$.LC5, %edi
        31.   movl	$1, %eax
        32.   addq	$1, %rbx
        33.   callq	printf
        34.   cmpq	$8, %rbx
        35.   jne	.L4
        36.   xorl	%eax, %eax
        37.   addq	$96, %rsp
        38.   popq	%rbx
        39.   popq	%r10
        40.   popq	%rbp
        41.   leaq	-8(%r10), %rsp
        42.   retq
        43.   movl	$.LC2, %edi
        44.   callq	puts
        45.   movl	$1, %eax
        46.   jmp	.L1


Instruction Info:
[1]: #uOps
[2]: Latency
[3]: RThroughput
[4]: MayLoad
[5]: MayStore
[6]: HasSideEffects (U)

[1]    [2]    [3]    [4]    [5]    [6]    Instructions:
 1      1     0.50                        leaq	8(%rsp), %r10
 1      1     0.25                        andq	$-32, %rsp
 4      6     1.00    *      *            pushq	-8(%r10)
 3      2     1.00           *            pushq	%rbp
 1      1     0.25                        movq	%rsp, %rbp
 3      2     1.00           *            pushq	%r10
 3      2     1.00           *            pushq	%rbx
 1      1     0.25                        subq	$96, %rsp
 2      6     0.50    *                   testb	$-128, __cpu_model+13(%rip)
 1      1     0.50                        je	.L10
 1      7     0.50    *                   vmovapd	.LC0(%rip), %ymm0
 1      1     0.25                        movl	$4000000000, %ebx
 1      7     0.50    *                   vmovapd	.LC1(%rip), %ymm1
 1      7     0.50    *                   vmovapd	.LC3(%rip), %ymm3
 1      7     0.50    *                   vmovapd	.LC4(%rip), %ymm2
 1      14    5.00                        vdivpd	%ymm3, %ymm1, %ymm1
 1      14    5.00                        vdivpd	%ymm2, %ymm0, %ymm0
 1      1     0.25                        subq	$1, %rbx
 1      1     0.50                        jne	.L2
 2      1     1.00           *            vmovapd	%ymm1, -80(%rbp)
 2      1     1.00           *            vmovapd	%ymm0, -48(%rbp)
 4      0     0.67                  U     vzeroupper
 1      5     0.50    *                   vmovsd	-80(%rbp,%rbx,8), %xmm0
 1      1     0.25                        movq	%rbx, %rsi
 1      1     0.25                        movl	$.LC5, %edi
 1      1     0.25                        movl	$1, %eax
 2      1     1.00           *            vmovsd	%xmm0, -88(%rbp)
 4      3     1.00                        callq	printf
 1      5     0.50    *                   vmovsd	-88(%rbp), %xmm0
 1      1     0.25                        movq	%rbx, %rsi
 1      1     0.25                        movl	$.LC5, %edi
 1      1     0.25                        movl	$1, %eax
 1      1     0.25                        addq	$1, %rbx
 4      3     1.00                        callq	printf
 1      1     0.25                        cmpq	$8, %rbx
 1      1     0.50                        jne	.L4
 1      0     0.17                        xorl	%eax, %eax
 1      1     0.25                        addq	$96, %rsp
 2      6     0.50    *                   popq	%rbx
 2      6     0.50    *                   popq	%r10
 2      6     0.50    *                   popq	%rbp
 1      1     0.50                        leaq	-8(%r10), %rsp
 3      7     1.00                  U     retq
 1      1     0.25                        movl	$.LC2, %edi
 4      3     1.00                        callq	puts
 1      1     0.25                        movl	$1, %eax
 1      1     0.50                        jmp	.L1


Retire Control Unit - number of cycles where we saw N instructions retired:
[# retired], [# cycles]
 0,           316755  (91.3%)
 1,           7  (0.0%)
 2,           1  (0.0%)
 3,           1  (0.0%)
 4,           1  (0.0%)
 6,           10001  (2.9%)
 8,           1  (0.0%)
 11,          10000  (2.9%)
 30,          9999  (2.9%)

Total ROB Entries:                224
Max Used ROB Entries:             224  ( 100.0% )
Average Used ROB Entries per cy:  215  ( 96.0% )


Resources:
[0]   - SKXDivider
[1]   - SKXFPDivider
[2]   - SKXPort0
[3]   - SKXPort1
[4]   - SKXPort2
[5]   - SKXPort3
[6]   - SKXPort4
[7]   - SKXPort5
[8]   - SKXPort6
[9]   - SKXPort7


Resource pressure per iteration:
[0]    [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    
 -     10.00  10.00  10.00  7.50   7.50   10.00  10.00  10.00  7.00   

Resource pressure by instruction:
[0]    [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    Instructions:
 -      -      -     1.00    -      -      -      -      -      -     leaq	8(%rsp), %r10
 -      -      -      -      -      -      -     1.00    -      -     andq	$-32, %rsp
 -      -      -     1.00   0.67   0.33   1.00    -      -     1.00   pushq	-8(%r10)
 -      -      -     1.00    -      -     1.00    -      -     1.00   pushq	%rbp
 -      -      -      -      -      -      -      -     1.00    -     movq	%rsp, %rbp
 -      -      -      -      -      -     1.00   1.00    -     1.00   pushq	%r10
 -      -      -     1.00    -     1.00   1.00    -      -      -     pushq	%rbx
 -      -      -      -      -      -      -     0.33   0.67    -     subq	$96, %rsp
 -      -     1.00    -     0.50   0.50    -      -      -      -     testb	$-128, __cpu_model+13(%rip)
 -      -     1.00    -      -      -      -      -      -      -     je	.L10
 -      -      -      -     0.50   0.50    -      -      -      -     vmovapd	.LC0(%rip), %ymm0
 -      -      -      -      -      -      -      -     1.00    -     movl	$4000000000, %ebx
 -      -      -      -     0.50   0.50    -      -      -      -     vmovapd	.LC1(%rip), %ymm1
 -      -      -      -     0.50   0.50    -      -      -      -     vmovapd	.LC3(%rip), %ymm3
 -      -      -      -     0.50   0.50    -      -      -      -     vmovapd	.LC4(%rip), %ymm2
 -     5.00   1.00    -      -      -      -      -      -      -     vdivpd	%ymm3, %ymm1, %ymm1
 -     5.00   1.00    -      -      -      -      -      -      -     vdivpd	%ymm2, %ymm0, %ymm0
 -      -      -      -      -      -      -     1.00    -      -     subq	$1, %rbx
 -      -     1.00    -      -      -      -      -      -      -     jne	.L2
 -      -      -      -      -      -     1.00    -      -     1.00   vmovapd	%ymm1, -80(%rbp)
 -      -      -      -     0.17   0.17   1.00    -      -     0.67   vmovapd	%ymm0, -48(%rbp)
 -      -      -      -      -      -      -      -      -      -     vzeroupper
 -      -      -      -     1.00    -      -      -      -      -     vmovsd	-80(%rbp,%rbx,8), %xmm0
 -      -      -      -      -      -      -     0.67   0.33    -     movq	%rbx, %rsi
 -      -      -     1.00    -      -      -      -      -      -     movl	$.LC5, %edi
 -      -      -      -      -      -      -      -     1.00    -     movl	$1, %eax
 -      -      -      -     0.17   0.17   1.00    -      -     0.67   vmovsd	%xmm0, -88(%rbp)
 -      -     0.67    -      -      -     1.00   1.00   0.33   1.00   callq	printf
 -      -      -      -     0.50   0.50    -      -      -      -     vmovsd	-88(%rbp), %xmm0
 -      -      -     1.00    -      -      -      -      -      -     movq	%rbx, %rsi
 -      -     0.33    -      -      -      -      -     0.67    -     movl	$.LC5, %edi
 -      -      -      -      -      -      -     1.00    -      -     movl	$1, %eax
 -      -      -     1.00    -      -      -      -      -      -     addq	$1, %rbx
 -      -     0.33    -     0.50   0.50   1.00   0.67   1.00    -     callq	printf
 -      -      -     0.67    -      -      -     0.33    -      -     cmpq	$8, %rbx
 -      -     0.67    -      -      -      -      -     0.33    -     jne	.L4
 -      -      -      -      -      -      -      -      -      -     xorl	%eax, %eax
 -      -      -     0.33    -      -      -      -     0.67    -     addq	$96, %rsp
 -      -     0.33    -     0.50   0.50    -     0.67    -      -     popq	%rbx
 -      -      -     0.67   0.50   0.50    -     0.33    -      -     popq	%r10
 -      -     0.67    -     0.50   0.50    -     0.33    -      -     popq	%rbp
 -      -      -     1.00    -      -      -      -      -      -     leaq	-8(%r10), %rsp
 -      -     0.33   0.33   0.50   0.50    -     0.33   1.00    -     retq
 -      -     0.67    -      -      -      -     0.33    -      -     movl	$.LC2, %edi
 -      -     1.00    -      -     0.33   1.00   1.00    -     0.67   callq	puts
 -      -      -      -      -      -      -      -     1.00    -     movl	$1, %eax
 -      -      -      -      -      -      -      -     1.00    -     jmp	.L1


Timeline view:
                    0123456789          0123456789          0123456789          01234567
Index     0123456789          0123456789          0123456789          0123456789        

[0,0]     DeER .    .    .    .    .    .    .    .    .    .    .    .    .    .    . .   leaq	8(%rsp), %r10
[0,1]     DeER .    .    .    .    .    .    .    .    .    .    .    .    .    .    . .   andq	$-32, %rsp
[0,2]     D=eeeeeeER.    .    .    .    .    .    .    .    .    .    .    .    .    . .   pushq	-8(%r10)
[0,3]     .D======eeER   .    .    .    .    .    .    .    .    .    .    .    .    . .   pushq	%rbp
[0,4]     .D========eER  .    .    .    .    .    .    .    .    .    .    .    .    . .   movq	%rsp, %rbp
[0,5]     . D=======eeER .    .    .    .    .    .    .    .    .    .    .    .    . .   pushq	%r10
[0,6]     . D=========eeER    .    .    .    .    .    .    .    .    .    .    .    . .   pushq	%rbx
[0,7]     .  D==========eER   .    .    .    .    .    .    .    .    .    .    .    . .   subq	$96, %rsp
[0,8]     .  DeeeeeeE-----R   .    .    .    .    .    .    .    .    .    .    .    . .   testb	$-128, __cpu_model+13(%rip)
[0,9]     .  D======eE----R   .    .    .    .    .    .    .    .    .    .    .    . .   je	.L10
[0,10]    .  DeeeeeeeE----R   .    .    .    .    .    .    .    .    .    .    .    . .   vmovapd	.LC0(%rip), %ymm0
[0,11]    .  DeE----------R   .    .    .    .    .    .    .    .    .    .    .    . .   movl	$4000000000, %ebx
[0,12]    .   DeeeeeeeE---R   .    .    .    .    .    .    .    .    .    .    .    . .   vmovapd	.LC1(%rip), %ymm1
[0,13]    .   DeeeeeeeE---R   .    .    .    .    .    .    .    .    .    .    .    . .   vmovapd	.LC3(%rip), %ymm3
[0,14]    .   D=eeeeeeeE--R   .    .    .    .    .    .    .    .    .    .    .    . .   vmovapd	.LC4(%rip), %ymm2
[0,15]    .   D=======eeeeeeeeeeeeeeER  .    .    .    .    .    .    .    .    .    . .   vdivpd	%ymm3, %ymm1, %ymm1
[0,16]    .   D============eeeeeeeeeeeeeeER  .    .    .    .    .    .    .    .    . .   vdivpd	%ymm2, %ymm0, %ymm0
[0,17]    .   DeE-------------------------R  .    .    .    .    .    .    .    .    . .   subq	$1, %rbx
[0,18]    .    DeE------------------------R  .    .    .    .    .    .    .    .    . .   jne	.L2
[0,19]    .    D====================eE----R  .    .    .    .    .    .    .    .    . .   vmovapd	%ymm1, -80(%rbp)
[0,20]    .    D=========================eER .    .    .    .    .    .    .    .    . .   vmovapd	%ymm0, -48(%rbp)
[0,21]    .    .D--------------------------R .    .    .    .    .    .    .    .    . .   vzeroupper
[0,22]    .    .D====eeeeeE----------------R .    .    .    .    .    .    .    .    . .   vmovsd	-80(%rbp,%rbx,8), %xmm0
[0,23]    .    .DeE------------------------R .    .    .    .    .    .    .    .    . .   movq	%rbx, %rsi
[0,24]    .    . DeE-----------------------R .    .    .    .    .    .    .    .    . .   movl	$.LC5, %edi
[0,25]    .    . DeE-----------------------R .    .    .    .    .    .    .    .    . .   movl	$1, %eax
[0,26]    .    . D========================eER.    .    .    .    .    .    .    .    . .   vmovsd	%xmm0, -88(%rbp)
Truncated display due to cycle limit


Average Wait times (based on the timeline view):
[0]: Executions
[1]: Average time spent waiting in a scheduler's queue
[2]: Average time spent waiting in a scheduler's queue while ready
[3]: Average time elapsed from WB until retire stage

      [0]    [1]    [2]    [3]
0.     10    11.2   0.1    89.4      leaq	8(%rsp), %r10
1.     10    11.4   0.3    89.2      andq	$-32, %rsp
2.     10    12.1   0.4    83.2      pushq	-8(%r10)
3.     10    17.1   0.0    81.4      pushq	%rbp
4.     10    19.1   0.0    80.5      movq	%rsp, %rbp
5.     10    18.1   0.0    79.6      pushq	%r10
6.     10    20.1   0.0    77.8      pushq	%rbx
7.     10    21.1   0.0    76.9      subq	$96, %rsp
8.     10    1.0    1.0    92.0      testb	$-128, __cpu_model+13(%rip)
9.     10    7.0    0.0    91.0      je	.L10
10.    10    1.5    1.5    90.5      vmovapd	.LC0(%rip), %ymm0
11.    10    1.0    1.0    97.0      movl	$4000000000, %ebx
12.    10    1.1    1.1    89.9      vmovapd	.LC1(%rip), %ymm1
13.    10    1.5    1.5    89.5      vmovapd	.LC3(%rip), %ymm3
14.    10    2.2    2.2    88.8      vmovapd	.LC4(%rip), %ymm2
15.    10    8.6    0.1    76.5      vdivpd	%ymm3, %ymm1, %ymm1
16.    10    13.6   4.4    72.0      vdivpd	%ymm2, %ymm0, %ymm0
17.    10    1.1    0.1    97.5      subq	$1, %rbx
18.    10    1.1    0.0    96.5      jne	.L2
19.    10    26.3   0.3    71.3      vmovapd	%ymm1, -80(%rbp)
20.    10    30.2   0.2    67.5      vmovapd	%ymm0, -48(%rbp)
21.    10    0.0    0.0    84.7      vzeroupper
22.    10    7.0    0.6    72.7      vmovsd	-80(%rbp,%rbx,8), %xmm0
23.    10    1.0    1.0    82.7      movq	%rbx, %rsi
24.    10    1.0    1.0    81.7      movl	$.LC5, %edi
25.    10    1.0    1.0    81.7      movl	$1, %eax
26.    10    18.4   0.6    64.4      vmovsd	%xmm0, -88(%rbp)
27.    10    8.1    0.7    0.0       callq	printf
28.    10    6.2    0.6    96.9      vmovsd	-88(%rbp), %xmm0
29.    10    1.0    1.0    106.1     movq	%rbx, %rsi
30.    10    1.0    1.0    105.1     movl	$.LC5, %edi
31.    10    1.1    1.1    105.0     movl	$1, %eax
32.    10    1.2    1.2    104.9     addq	$1, %rbx
33.    10    7.7    1.3    0.0       callq	printf
34.    10    1.2    0.0    105.5     cmpq	$8, %rbx
35.    10    2.2    0.0    104.5     jne	.L4
36.    10    0.0    0.0    106.7     xorl	%eax, %eax
37.    10    6.6    0.6    99.1      addq	$96, %rsp
38.    10    7.6    0.0    93.1      popq	%rbx
39.    10    13.6   0.0    87.1      popq	%r10
40.    10    12.2   0.0    81.1      popq	%rbp
41.    10    12.2   0.0    86.1      leaq	-8(%r10), %rsp
42.    10    1.0    1.0    91.3      retq
43.    10    1.1    1.1    96.2      movl	$.LC2, %edi
44.    10    12.5   0.3    0.0       callq	puts
45.    10    1.1    1.1    110.4     movl	$1, %eax
46.    10    1.0    1.0    109.5     jmp	.L1
       10    7.5    0.6    83.7      <total>
